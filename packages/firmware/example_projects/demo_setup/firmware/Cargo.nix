
# This file was @generated by crate2nix 0.14.1 with the command:
#   "generate"
# See https://github.com/kolloch/crate2nix for more info.

{ nixpkgs ? <nixpkgs>
, pkgs ? import nixpkgs { config = {}; }
, lib ? pkgs.lib
, stdenv ? pkgs.stdenv
, buildRustCrateForPkgs ? pkgs: pkgs.buildRustCrate
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
, defaultCrateOverrides ? pkgs.defaultCrateOverrides
  # The features to enable for the root_crate or the workspace_members.
, rootFeatures ? [ "default" ]
  # If true, throw errors instead of issueing deprecation warnings.
, strictDeprecation ? false
  # Elements to add to the `-C target-feature=` argument passed to `rustc`
  # (separated by `,`, prefixed with `+`).
  # Used for conditional compilation based on CPU feature detection.
, targetFeatures ? []
  # Whether to perform release builds: longer compile times, faster binaries.
, release ? true
  # Additional crate2nix configuration if it exists.
, crateConfig
  ? if builtins.pathExists ./crate-config.nix
    then pkgs.callPackage ./crate-config.nix {}
    else {}
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #

  rootCrate = rec {
    packageId = "dfu_demo";

    # Use this attribute to refer to the derivation building your root crate package.
    # You can override the features with rootCrate.build.override { features = [ "default" "feature1" ... ]; }.
    build = internal.buildRustCrateWithFeatures {
      inherit packageId;
    };

    # Debug support which might change between releases.
    # File a bug if you depend on any for non-debug work!
    debug = internal.debugCrate { inherit packageId; };
  };
  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "dfu_demo" = rec {
      packageId = "dfu_demo";
      build = internal.buildRustCrateWithFeatures {
        packageId = "dfu_demo";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };

  # A derivation that joins the outputs of all workspace members together.
  allWorkspaceMembers = pkgs.symlinkJoin {
      name = "all-workspace-members";
      paths =
        let members = builtins.attrValues workspaceMembers;
        in builtins.map (m: m.build) members;
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "ahash" = rec {
        crateName = "ahash";
        version = "0.8.12";
        edition = "2018";
        sha256 = "0xbsp9rlm5ki017c0w6ay8kjwinwm8knjncci95mii30rmwz25as";
        authors = [
          "Tom Kaitchuck <Tom.Kaitchuck@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            target = { target, features }: (!(("arm" == target."arch" or null) && ("none" == target."os" or null)));
            features = [ "alloc" ];
          }
          {
            name = "zerocopy";
            packageId = "zerocopy";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "atomic-polyfill" = [ "dep:portable-atomic" "once_cell/critical-section" ];
          "compile-time-rng" = [ "const-random" ];
          "const-random" = [ "dep:const-random" ];
          "default" = [ "std" "runtime-rng" ];
          "getrandom" = [ "dep:getrandom" ];
          "runtime-rng" = [ "getrandom" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "aligned" = rec {
        crateName = "aligned";
        version = "0.4.2";
        edition = "2021";
        sha256 = "08srg0rbz21s1kk97b1canffly7icr31sp7l1nqk2i1ym05lqzip";
        dependencies = [
          {
            name = "as-slice";
            packageId = "as-slice";
          }
        ];

      };
      "as-slice" = rec {
        crateName = "as-slice";
        version = "0.2.1";
        edition = "2015";
        sha256 = "05j52y1ws8kir5zjxnl48ann0if79sb56p9nm76hvma01r7nnssi";
        libName = "as_slice";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
          "Emil Fresk <emil.fresk@gmail.com>"
        ];
        dependencies = [
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
            usesDefaultFeatures = false;
          }
        ];

      };
      "autocfg" = rec {
        crateName = "autocfg";
        version = "1.4.0";
        edition = "2015";
        sha256 = "09lz3by90d2hphbq56znag9v87gfpd9gb8nr82hll8z6x2nhprdc";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];

      };
      "bare-metal" = rec {
        crateName = "bare-metal";
        version = "0.2.5";
        edition = "2015";
        sha256 = "1cy5pbb92fznnri72y6drfpjxj4qdmd62f0rrlgy70dxlppn9ssx";
        libName = "bare_metal";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "const-fn" ];
      };
      "bit_field" = rec {
        crateName = "bit_field";
        version = "0.10.2";
        edition = "2015";
        sha256 = "0qav5rpm4hqc33vmf4vc4r0mh51yjx5vmd9zhih26n9yjs3730nw";
        authors = [
          "Philipp Oppermann <dev@phil-opp.com>"
        ];

      };
      "bitfield 0.13.2" = rec {
        crateName = "bitfield";
        version = "0.13.2";
        edition = "2015";
        sha256 = "06g7jb5r2b856vnhx76081fg90jvmy61kjqcfjysgmd5hclvvbs6";
        authors = [
          "Loïc Damien <loic.damien@dzamlo.ch>"
        ];

      };
      "bitfield 0.14.0" = rec {
        crateName = "bitfield";
        version = "0.14.0";
        edition = "2015";
        sha256 = "1b26k9acwss4qvrl60lf9n83l17d4hj47n5rmpd3iigf9j9n0zid";
        authors = [
          "Loïc Damien <loic.damien@dzamlo.ch>"
        ];

      };
      "bitflags 1.3.2" = rec {
        crateName = "bitflags";
        version = "1.3.2";
        edition = "2018";
        sha256 = "12ki6w8gn1ldq7yz9y680llwk5gmrhrzszaa17g1sbrw2r2qvwxy";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "bitflags 2.9.1" = rec {
        crateName = "bitflags";
        version = "2.9.1";
        edition = "2021";
        sha256 = "0rz9rpp5wywwqb3mxfkywh4drmzci2fch780q7lifbf6bsc5d3hv";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "block-buffer" = rec {
        crateName = "block-buffer";
        version = "0.10.4";
        edition = "2018";
        sha256 = "0w9sa2ypmrsqqvc20nhwr75wbb5cjr4kkyhpjm1z1lv2kdicfy1h";
        libName = "block_buffer";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];

      };
      "block-device-driver" = rec {
        crateName = "block-device-driver";
        version = "0.2.0";
        edition = "2021";
        sha256 = "13i5pv1mfkxygbxlqm0z5kvhdf29aa9w9d146l2nizjr5xcm3h24";
        libName = "block_device_driver";
        dependencies = [
          {
            name = "aligned";
            packageId = "aligned";
          }
        ];

      };
      "byteorder" = rec {
        crateName = "byteorder";
        version = "1.5.0";
        edition = "2021";
        sha256 = "0jzncxyf404mwqdbspihyzpkndfgda450l0893pz5xj685cg5l0z";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "cfg-if" = rec {
        crateName = "cfg-if";
        version = "1.0.0";
        edition = "2018";
        sha256 = "1za0vb97n4brpzpv8lsbnzmq5r8f2b0cpqqr0sy8h5bn751xxwds";
        libName = "cfg_if";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "cortex-m" = rec {
        crateName = "cortex-m";
        version = "0.7.7";
        edition = "2018";
        links = "cortex-m";
        sha256 = "1fbca698v4gv57mv5fc48jrz8wcy6sv675n6fsrsah4qykc11ilf";
        libName = "cortex_m";
        authors = [
          "The Cortex-M Team <cortex-m@teams.rust-embedded.org>"
          "Jorge Aparicio <jorge@japaric.io>"
        ];
        dependencies = [
          {
            name = "bare-metal";
            packageId = "bare-metal";
            features = [ "const-fn" ];
          }
          {
            name = "bitfield";
            packageId = "bitfield 0.13.2";
          }
          {
            name = "critical-section";
            packageId = "critical-section";
            optional = true;
          }
          {
            name = "embedded-hal";
            packageId = "embedded-hal 0.2.7";
          }
          {
            name = "volatile-register";
            packageId = "volatile-register";
          }
        ];
        features = {
          "cm7-r0p1" = [ "cm7" ];
          "critical-section" = [ "dep:critical-section" ];
          "critical-section-single-core" = [ "critical-section/restore-state-bool" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "critical-section" "critical-section-single-core" "inline-asm" ];
      };
      "cortex-m-rt" = rec {
        crateName = "cortex-m-rt";
        version = "0.7.5";
        edition = "2021";
        links = "cortex-m-rt";
        sha256 = "19jvkxy9lfq1v4bfhksgm8pn1khgmqbnf0vbryf2jk5k8vn4s7c0";
        libName = "cortex_m_rt";
        authors = [
          "The Cortex-M Team <cortex-m@teams.rust-embedded.org>"
          "Jorge Aparicio <jorge@japaric.io>"
          "Hideki Sekine <sekineh@me.com>"
        ];
        dependencies = [
          {
            name = "cortex-m-rt-macros";
            packageId = "cortex-m-rt-macros";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "device" ];
      };
      "cortex-m-rt-macros" = rec {
        crateName = "cortex-m-rt-macros";
        version = "0.7.5";
        edition = "2021";
        sha256 = "0wplch1riq7zlfxyx29qjszbik4l0gk8w87xfvjydq59g6iljxg3";
        procMacro = true;
        libName = "cortex_m_rt_macros";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" "full" ];
          }
        ];

      };
      "critical-section" = rec {
        crateName = "critical-section";
        version = "1.2.0";
        edition = "2018";
        sha256 = "02ylhcykxjc40xrfhk1lwc21jqgz4dbwv3jr49ymw733c51yl3kr";
        libName = "critical_section";
        features = {
          "std" = [ "restore-state-bool" ];
        };
        resolvedDefaultFeatures = [ "restore-state-bool" ];
      };
      "crypto-common" = rec {
        crateName = "crypto-common";
        version = "0.1.6";
        edition = "2018";
        sha256 = "1cvby95a6xg7kxdz5ln3rl9xh66nz66w46mm3g56ri1z5x815yqv";
        libName = "crypto_common";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
            features = [ "more_lengths" ];
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        features = {
          "getrandom" = [ "rand_core/getrandom" ];
          "rand_core" = [ "dep:rand_core" ];
        };
      };
      "darling" = rec {
        crateName = "darling";
        version = "0.20.11";
        edition = "2021";
        sha256 = "1vmlphlrlw4f50z16p4bc9p5qwdni1ba95qmxfrrmzs6dh8lczzw";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core";
          }
          {
            name = "darling_macro";
            packageId = "darling_macro";
          }
        ];
        features = {
          "default" = [ "suggestions" ];
          "diagnostics" = [ "darling_core/diagnostics" ];
          "suggestions" = [ "darling_core/suggestions" ];
        };
        resolvedDefaultFeatures = [ "default" "suggestions" ];
      };
      "darling_core" = rec {
        crateName = "darling_core";
        version = "0.20.11";
        edition = "2021";
        sha256 = "0bj1af6xl4ablnqbgn827m43b8fiicgv180749f5cphqdmcvj00d";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "ident_case";
            packageId = "ident_case";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "strsim";
            packageId = "strsim";
            optional = true;
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" "extra-traits" ];
          }
        ];
        features = {
          "strsim" = [ "dep:strsim" ];
          "suggestions" = [ "strsim" ];
        };
        resolvedDefaultFeatures = [ "strsim" "suggestions" ];
      };
      "darling_macro" = rec {
        crateName = "darling_macro";
        version = "0.20.11";
        edition = "2021";
        sha256 = "1bbfbc2px6sj1pqqq97bgqn6c8xdnb2fmz66f7f40nrqrcybjd7w";
        procMacro = true;
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "defmt 0.3.100" = rec {
        crateName = "defmt";
        version = "0.3.100";
        edition = "2021";
        sha256 = "1bb4dcq13szxs7y1ibvyjy7yn1sigb84vz1n841b4abhh51k95ph";
        authors = [
          "The Knurling-rs developers"
        ];
        dependencies = [
          {
            name = "defmt";
            packageId = "defmt 1.0.1";
            rename = "defmt10";
          }
        ];
        features = {
          "alloc" = [ "defmt10/alloc" ];
          "avoid-default-panic" = [ "defmt10/avoid-default-panic" ];
          "encoding-raw" = [ "defmt10/encoding-raw" ];
          "encoding-rzcobs" = [ "defmt10/encoding-rzcobs" ];
          "ip_in_core" = [ "defmt10/ip_in_core" ];
          "unstable-test" = [ "defmt10/unstable-test" ];
        };
        resolvedDefaultFeatures = [ "ip_in_core" ];
      };
      "defmt 1.0.1" = rec {
        crateName = "defmt";
        version = "1.0.1";
        edition = "2021";
        links = "defmt";
        sha256 = "0y4vyfb7pgjdmqyqnk1hs0xgcz8yv99n91x2zp8s2bx3dmxrg3al";
        authors = [
          "The Knurling-rs developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "defmt-macros";
            packageId = "defmt-macros";
          }
        ];
        features = {
          "unstable-test" = [ "defmt-macros/unstable-test" ];
        };
        resolvedDefaultFeatures = [ "ip_in_core" ];
      };
      "defmt-macros" = rec {
        crateName = "defmt-macros";
        version = "1.0.1";
        edition = "2021";
        sha256 = "13i5xfn472dpyfikhlv3rrw32jaq5nvw8i23wk7l3x5whlmc2krx";
        procMacro = true;
        libName = "defmt_macros";
        authors = [
          "The Knurling-rs developers"
        ];
        dependencies = [
          {
            name = "defmt-parser";
            packageId = "defmt-parser";
          }
          {
            name = "proc-macro-error2";
            packageId = "proc-macro-error2";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" "extra-traits" ];
          }
        ];
        features = {
        };
      };
      "defmt-parser" = rec {
        crateName = "defmt-parser";
        version = "1.0.0";
        edition = "2021";
        sha256 = "0gpfky9sssil5qfaix5wxcwiqk7snszhl5gq3vcwkrxjncs07mhh";
        libName = "defmt_parser";
        authors = [
          "The Knurling-rs developers"
        ];
        dependencies = [
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
        };
      };
      "defmt-rtt" = rec {
        crateName = "defmt-rtt";
        version = "1.0.0";
        edition = "2021";
        sha256 = "1lfzlj5848v510jvn17cpnyzvskd7fnyp1ahnw19wjk4lnwc7jmj";
        libName = "defmt_rtt";
        authors = [
          "The Knurling-rs developers"
        ];
        dependencies = [
          {
            name = "critical-section";
            packageId = "critical-section";
          }
          {
            name = "defmt";
            packageId = "defmt 1.0.1";
          }
        ];
        features = {
        };
      };
      "dfu_demo" = rec {
        crateName = "dfu_demo";
        version = "0.1.0";
        edition = "2021";
        crateBin = [
          {
            name = "dfu_demo";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./.; };
        authors = [
          "James Carl <jamescarl96@gmail.com>"
        ];
        dependencies = [
          {
            name = "cortex-m";
            packageId = "cortex-m";
            features = [ "inline-asm" "critical-section-single-core" ];
          }
          {
            name = "cortex-m-rt";
            packageId = "cortex-m-rt";
          }
          {
            name = "defmt";
            packageId = "defmt 1.0.1";
          }
          {
            name = "defmt-rtt";
            packageId = "defmt-rtt";
          }
          {
            name = "embassy-boot-stm32";
            packageId = "embassy-boot-stm32";
          }
          {
            name = "embassy-executor";
            packageId = "embassy-executor";
            features = [ "arch-cortex-m" "executor-thread" "executor-interrupt" "defmt" ];
          }
          {
            name = "embassy-futures";
            packageId = "embassy-futures";
          }
          {
            name = "embassy-net";
            packageId = "embassy-net";
            features = [ "defmt" "icmp" "proto-ipv4" "udp" "tcp" "medium-ethernet" ];
          }
          {
            name = "embassy-stm32";
            packageId = "embassy-stm32";
            features = [ "defmt" "stm32f303vc" "unstable-pac" "time-driver-tim2" "exti" ];
          }
          {
            name = "embassy-sync";
            packageId = "embassy-sync 0.6.2";
            features = [ "defmt" ];
          }
          {
            name = "embassy-time";
            packageId = "embassy-time";
            features = [ "defmt" "defmt-timestamp-uptime" "tick-hz-32_768" ];
          }
          {
            name = "embassy-usb";
            packageId = "embassy-usb";
            features = [ "defmt" ];
          }
          {
            name = "embedded-hal";
            packageId = "embedded-hal 0.2.7";
          }
          {
            name = "embedded-storage";
            packageId = "embedded-storage";
          }
          {
            name = "heapless";
            packageId = "heapless";
            usesDefaultFeatures = false;
          }
          {
            name = "nb";
            packageId = "nb 1.1.0";
          }
          {
            name = "panic-probe";
            packageId = "panic-probe";
            features = [ "print-defmt" ];
          }
          {
            name = "static_cell";
            packageId = "static_cell";
          }
        ];

      };
      "digest" = rec {
        crateName = "digest";
        version = "0.10.7";
        edition = "2018";
        sha256 = "14p2n6ih29x81akj097lvz7wi9b6b9hvls0lwrv7b6xwyy0s5ncy";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer";
            optional = true;
          }
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "block-buffer" = [ "dep:block-buffer" ];
          "const-oid" = [ "dep:const-oid" ];
          "core-api" = [ "block-buffer" ];
          "default" = [ "core-api" ];
          "dev" = [ "blobby" ];
          "mac" = [ "subtle" ];
          "oid" = [ "const-oid" ];
          "rand_core" = [ "crypto-common/rand_core" ];
          "std" = [ "alloc" "crypto-common/std" ];
          "subtle" = [ "dep:subtle" ];
        };
        resolvedDefaultFeatures = [ "block-buffer" "core-api" "default" ];
      };
      "document-features" = rec {
        crateName = "document-features";
        version = "0.2.11";
        edition = "2018";
        sha256 = "0pdhpbz687fk2rkgz45yy3gvbhlxliwb7g1lj3jbx1f1qr89n94m";
        procMacro = true;
        libName = "document_features";
        libPath = "lib.rs";
        authors = [
          "Slint Developers <info@slint.dev>"
        ];
        dependencies = [
          {
            name = "litrs";
            packageId = "litrs";
            usesDefaultFeatures = false;
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "embassy-boot" = rec {
        crateName = "embassy-boot";
        version = "0.4.0";
        edition = "2021";
        sha256 = "06qsi1knjc6xgqvp90kvspmnq26bn9am97q8kv0r6ddi8qp54rmi";
        libName = "embassy_boot";
        dependencies = [
          {
            name = "digest";
            packageId = "digest";
          }
          {
            name = "embassy-embedded-hal";
            packageId = "embassy-embedded-hal";
          }
          {
            name = "embassy-sync";
            packageId = "embassy-sync 0.6.2";
          }
          {
            name = "embedded-storage";
            packageId = "embedded-storage";
          }
          {
            name = "embedded-storage-async";
            packageId = "embedded-storage-async";
          }
          {
            name = "signature";
            packageId = "signature";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "defmt" = [ "dep:defmt" ];
          "ed25519-dalek" = [ "dep:ed25519-dalek" "_verify" ];
          "ed25519-salty" = [ "dep:salty" "_verify" ];
          "log" = [ "dep:log" ];
        };
      };
      "embassy-boot-stm32" = rec {
        crateName = "embassy-boot-stm32";
        version = "0.3.0";
        edition = "2021";
        sha256 = "1lhd07w85ss51h7hb60b0177wddkxc7l2kpzci4myvd9zb0nwamf";
        libName = "embassy_boot_stm32";
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cortex-m";
            packageId = "cortex-m";
          }
          {
            name = "cortex-m-rt";
            packageId = "cortex-m-rt";
          }
          {
            name = "embassy-boot";
            packageId = "embassy-boot";
          }
          {
            name = "embassy-stm32";
            packageId = "embassy-stm32";
            usesDefaultFeatures = false;
          }
          {
            name = "embassy-sync";
            packageId = "embassy-sync 0.7.0";
          }
          {
            name = "embedded-storage";
            packageId = "embedded-storage";
          }
          {
            name = "embedded-storage-async";
            packageId = "embedded-storage-async";
          }
        ];
        features = {
          "defmt" = [ "dep:defmt" "embassy-boot/defmt" "embassy-stm32/defmt" ];
          "log" = [ "dep:log" "embassy-boot/log" "embassy-stm32/log" ];
        };
      };
      "embassy-embedded-hal" = rec {
        crateName = "embassy-embedded-hal";
        version = "0.3.0";
        edition = "2021";
        sha256 = "04paw8wrvkzahgk4myylhr6gba6dljgmqkylvxl38kgdbgpsbzj1";
        libName = "embassy_embedded_hal";
        dependencies = [
          {
            name = "defmt";
            packageId = "defmt 0.3.100";
            optional = true;
          }
          {
            name = "embassy-futures";
            packageId = "embassy-futures";
          }
          {
            name = "embassy-sync";
            packageId = "embassy-sync 0.6.2";
          }
          {
            name = "embassy-time";
            packageId = "embassy-time";
            optional = true;
          }
          {
            name = "embedded-hal";
            packageId = "embedded-hal 0.2.7";
            rename = "embedded-hal-02";
            features = [ "unproven" ];
          }
          {
            name = "embedded-hal";
            packageId = "embedded-hal 1.0.0";
            rename = "embedded-hal-1";
          }
          {
            name = "embedded-hal-async";
            packageId = "embedded-hal-async";
          }
          {
            name = "embedded-storage";
            packageId = "embedded-storage";
          }
          {
            name = "embedded-storage-async";
            packageId = "embedded-storage-async";
          }
          {
            name = "nb";
            packageId = "nb 1.1.0";
          }
        ];
        features = {
          "default" = [ "time" ];
          "defmt" = [ "dep:defmt" ];
          "time" = [ "dep:embassy-time" ];
        };
        resolvedDefaultFeatures = [ "default" "defmt" "time" ];
      };
      "embassy-executor" = rec {
        crateName = "embassy-executor";
        version = "0.7.0";
        edition = "2021";
        sha256 = "1ijssd96f1zfivwl3hlvbigw8rdj27cy5i7ci5zm0fikcv67nclh";
        libName = "embassy_executor";
        dependencies = [
          {
            name = "cortex-m";
            packageId = "cortex-m";
            optional = true;
          }
          {
            name = "critical-section";
            packageId = "critical-section";
          }
          {
            name = "defmt";
            packageId = "defmt 0.3.100";
            optional = true;
          }
          {
            name = "document-features";
            packageId = "document-features";
          }
          {
            name = "embassy-executor-macros";
            packageId = "embassy-executor-macros";
          }
        ];
        devDependencies = [
          {
            name = "critical-section";
            packageId = "critical-section";
            features = [ "std" ];
          }
        ];
        features = {
          "arch-avr" = [ "_arch" "dep:portable-atomic" "dep:avr-device" ];
          "arch-cortex-m" = [ "_arch" "dep:cortex-m" ];
          "arch-riscv32" = [ "_arch" ];
          "arch-spin" = [ "_arch" ];
          "arch-std" = [ "_arch" "critical-section/std" ];
          "arch-wasm" = [ "_arch" "dep:wasm-bindgen" "dep:js-sys" "critical-section/std" ];
          "defmt" = [ "dep:defmt" ];
          "log" = [ "dep:log" ];
          "nightly" = [ "embassy-executor-macros/nightly" ];
          "rtos-trace" = [ "dep:rtos-trace" "trace" "dep:embassy-time-driver" ];
          "timer-item-payload-size-1" = [ "_timer-item-payload" ];
          "timer-item-payload-size-2" = [ "_timer-item-payload" ];
          "timer-item-payload-size-4" = [ "_timer-item-payload" ];
          "timer-item-payload-size-8" = [ "_timer-item-payload" ];
        };
        resolvedDefaultFeatures = [ "_arch" "arch-cortex-m" "defmt" "executor-interrupt" "executor-thread" ];
      };
      "embassy-executor-macros" = rec {
        crateName = "embassy-executor-macros";
        version = "0.6.2";
        edition = "2021";
        sha256 = "1kxydmi3r7kcqvijapy54hb527dh4i9zqc53g48khqbg8klv2xrm";
        procMacro = true;
        libName = "embassy_executor_macros";
        dependencies = [
          {
            name = "darling";
            packageId = "darling";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" "visit" ];
          }
        ];
        features = {
        };
      };
      "embassy-futures" = rec {
        crateName = "embassy-futures";
        version = "0.1.1";
        edition = "2021";
        sha256 = "0ryhyycgi28k0p3i1srfsdk67ai6ixr5pjc8qx51wk3rp5sq11qz";
        libName = "embassy_futures";
        features = {
          "defmt" = [ "dep:defmt" ];
          "log" = [ "dep:log" ];
        };
      };
      "embassy-hal-internal" = rec {
        crateName = "embassy-hal-internal";
        version = "0.2.0";
        edition = "2021";
        sha256 = "0ncg8fkh0inb4jrskir9705ix7vrnp3yjsd190934in13v1vmwqf";
        libName = "embassy_hal_internal";
        dependencies = [
          {
            name = "cortex-m";
            packageId = "cortex-m";
            optional = true;
          }
          {
            name = "critical-section";
            packageId = "critical-section";
            optional = true;
          }
          {
            name = "defmt";
            packageId = "defmt 0.3.100";
            optional = true;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "cortex-m" = [ "dep:cortex-m" "dep:critical-section" ];
          "defmt" = [ "dep:defmt" ];
          "log" = [ "dep:log" ];
        };
        resolvedDefaultFeatures = [ "cortex-m" "defmt" "prio-bits-4" ];
      };
      "embassy-net" = rec {
        crateName = "embassy-net";
        version = "0.7.0";
        edition = "2021";
        sha256 = "10s3ghrdgs165xilz8qplx3fvcnn000jqwn6l04mndy1wngln34l";
        libName = "embassy_net";
        dependencies = [
          {
            name = "defmt";
            packageId = "defmt 0.3.100";
            optional = true;
          }
          {
            name = "document-features";
            packageId = "document-features";
          }
          {
            name = "embassy-net-driver";
            packageId = "embassy-net-driver";
          }
          {
            name = "embassy-sync";
            packageId = "embassy-sync 0.6.2";
          }
          {
            name = "embassy-time";
            packageId = "embassy-time";
          }
          {
            name = "embedded-io-async";
            packageId = "embedded-io-async";
          }
          {
            name = "embedded-nal-async";
            packageId = "embedded-nal-async";
          }
          {
            name = "heapless";
            packageId = "heapless";
            usesDefaultFeatures = false;
          }
          {
            name = "managed";
            packageId = "managed";
            usesDefaultFeatures = false;
            features = [ "map" ];
          }
          {
            name = "smoltcp";
            packageId = "smoltcp";
            usesDefaultFeatures = false;
            features = [ "socket" "async" ];
          }
        ];
        features = {
          "alloc" = [ "smoltcp/alloc" ];
          "defmt" = [ "dep:defmt" "smoltcp/defmt" "embassy-net-driver/defmt" "heapless/defmt-03" "defmt?/ip_in_core" ];
          "dhcpv4" = [ "proto-ipv4" "medium-ethernet" "smoltcp/socket-dhcpv4" ];
          "dhcpv4-hostname" = [ "dhcpv4" ];
          "dns" = [ "smoltcp/socket-dns" "smoltcp/proto-dns" ];
          "icmp" = [ "smoltcp/socket-icmp" ];
          "log" = [ "dep:log" ];
          "mdns" = [ "dns" "smoltcp/socket-mdns" ];
          "medium-ethernet" = [ "smoltcp/medium-ethernet" ];
          "medium-ieee802154" = [ "smoltcp/medium-ieee802154" ];
          "medium-ip" = [ "smoltcp/medium-ip" ];
          "multicast" = [ "smoltcp/multicast" ];
          "proto-ipv4" = [ "smoltcp/proto-ipv4" ];
          "proto-ipv6" = [ "smoltcp/proto-ipv6" ];
          "raw" = [ "smoltcp/socket-raw" ];
          "std" = [ "smoltcp/std" ];
          "tcp" = [ "smoltcp/socket-tcp" ];
          "udp" = [ "smoltcp/socket-udp" ];
        };
        resolvedDefaultFeatures = [ "defmt" "icmp" "medium-ethernet" "proto-ipv4" "tcp" "udp" ];
      };
      "embassy-net-driver" = rec {
        crateName = "embassy-net-driver";
        version = "0.2.0";
        edition = "2021";
        sha256 = "07bm2yr5l3zx1rgzqj7ywrrk3rgnf352n4b02gvhh1bni72b6kjj";
        libName = "embassy_net_driver";
        dependencies = [
          {
            name = "defmt";
            packageId = "defmt 0.3.100";
            optional = true;
          }
        ];
        features = {
          "defmt" = [ "dep:defmt" ];
        };
        resolvedDefaultFeatures = [ "defmt" ];
      };
      "embassy-net-driver-channel" = rec {
        crateName = "embassy-net-driver-channel";
        version = "0.3.0";
        edition = "2021";
        sha256 = "1dq6l2hifh0ayrpx48hha2krlv4pkanlncjg4fp3qgn4zqmc6628";
        libName = "embassy_net_driver_channel";
        dependencies = [
          {
            name = "embassy-futures";
            packageId = "embassy-futures";
          }
          {
            name = "embassy-net-driver";
            packageId = "embassy-net-driver";
          }
          {
            name = "embassy-sync";
            packageId = "embassy-sync 0.6.2";
          }
        ];
        features = {
          "defmt" = [ "dep:defmt" ];
          "log" = [ "dep:log" ];
        };
      };
      "embassy-stm32" = rec {
        crateName = "embassy-stm32";
        version = "0.2.0";
        edition = "2021";
        sha256 = "11wszxnf0c8r6ckq87fg8xb3iqmxh374fnknjxqbrpfd79rvpq71";
        libName = "embassy_stm32";
        dependencies = [
          {
            name = "aligned";
            packageId = "aligned";
          }
          {
            name = "bit_field";
            packageId = "bit_field";
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.9.1";
          }
          {
            name = "block-device-driver";
            packageId = "block-device-driver";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cortex-m";
            packageId = "cortex-m";
          }
          {
            name = "cortex-m-rt";
            packageId = "cortex-m-rt";
          }
          {
            name = "critical-section";
            packageId = "critical-section";
          }
          {
            name = "defmt";
            packageId = "defmt 0.3.100";
            optional = true;
          }
          {
            name = "document-features";
            packageId = "document-features";
          }
          {
            name = "embassy-embedded-hal";
            packageId = "embassy-embedded-hal";
            usesDefaultFeatures = false;
          }
          {
            name = "embassy-futures";
            packageId = "embassy-futures";
          }
          {
            name = "embassy-hal-internal";
            packageId = "embassy-hal-internal";
            features = [ "cortex-m" "prio-bits-4" ];
          }
          {
            name = "embassy-net-driver";
            packageId = "embassy-net-driver";
          }
          {
            name = "embassy-sync";
            packageId = "embassy-sync 0.6.2";
          }
          {
            name = "embassy-time";
            packageId = "embassy-time";
            optional = true;
          }
          {
            name = "embassy-time-driver";
            packageId = "embassy-time-driver";
            optional = true;
          }
          {
            name = "embassy-time-queue-utils";
            packageId = "embassy-time-queue-utils";
            optional = true;
          }
          {
            name = "embassy-usb-driver";
            packageId = "embassy-usb-driver";
          }
          {
            name = "embassy-usb-synopsys-otg";
            packageId = "embassy-usb-synopsys-otg";
          }
          {
            name = "embedded-can";
            packageId = "embedded-can";
          }
          {
            name = "embedded-hal";
            packageId = "embedded-hal 0.2.7";
            rename = "embedded-hal-02";
            features = [ "unproven" ];
          }
          {
            name = "embedded-hal";
            packageId = "embedded-hal 1.0.0";
            rename = "embedded-hal-1";
          }
          {
            name = "embedded-hal-async";
            packageId = "embedded-hal-async";
          }
          {
            name = "embedded-hal-nb";
            packageId = "embedded-hal-nb";
          }
          {
            name = "embedded-io";
            packageId = "embedded-io";
          }
          {
            name = "embedded-io-async";
            packageId = "embedded-io-async";
          }
          {
            name = "embedded-storage";
            packageId = "embedded-storage";
          }
          {
            name = "embedded-storage-async";
            packageId = "embedded-storage-async";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "nb";
            packageId = "nb 1.1.0";
          }
          {
            name = "rand_core";
            packageId = "rand_core";
          }
          {
            name = "sdio-host";
            packageId = "sdio-host";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "stm32-fmc";
            packageId = "stm32-fmc";
          }
          {
            name = "stm32-metapac";
            packageId = "stm32-metapac";
          }
          {
            name = "vcell";
            packageId = "vcell";
          }
          {
            name = "volatile-register";
            packageId = "volatile-register";
          }
        ];
        buildDependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "stm32-metapac";
            packageId = "stm32-metapac";
            usesDefaultFeatures = false;
            features = [ "metadata" ];
          }
        ];
        devDependencies = [
          {
            name = "critical-section";
            packageId = "critical-section";
            features = [ "std" ];
          }
        ];
        features = {
          "_time-driver" = [ "dep:embassy-time-driver" "time" "dep:embassy-time-queue-utils" ];
          "chrono" = [ "dep:chrono" ];
          "default" = [ "rt" ];
          "defmt" = [ "dep:defmt" "embassy-sync/defmt" "embassy-embedded-hal/defmt" "embassy-hal-internal/defmt" "embedded-io-async/defmt-03" "embassy-usb-driver/defmt" "embassy-net-driver/defmt" "embassy-time?/defmt" "embassy-usb-synopsys-otg/defmt" ];
          "log" = [ "dep:log" ];
          "low-power" = [ "dep:embassy-executor" "embassy-executor?/arch-cortex-m" "time" ];
          "rt" = [ "stm32-metapac/rt" ];
          "split-pa0" = [ "_split-pins-enabled" ];
          "split-pa1" = [ "_split-pins-enabled" ];
          "split-pc2" = [ "_split-pins-enabled" ];
          "split-pc3" = [ "_split-pins-enabled" ];
          "stm32c011d6" = [ "stm32-metapac/stm32c011d6" ];
          "stm32c011f4" = [ "stm32-metapac/stm32c011f4" ];
          "stm32c011f6" = [ "stm32-metapac/stm32c011f6" ];
          "stm32c011j4" = [ "stm32-metapac/stm32c011j4" ];
          "stm32c011j6" = [ "stm32-metapac/stm32c011j6" ];
          "stm32c031c4" = [ "stm32-metapac/stm32c031c4" ];
          "stm32c031c6" = [ "stm32-metapac/stm32c031c6" ];
          "stm32c031f4" = [ "stm32-metapac/stm32c031f4" ];
          "stm32c031f6" = [ "stm32-metapac/stm32c031f6" ];
          "stm32c031g4" = [ "stm32-metapac/stm32c031g4" ];
          "stm32c031g6" = [ "stm32-metapac/stm32c031g6" ];
          "stm32c031k4" = [ "stm32-metapac/stm32c031k4" ];
          "stm32c031k6" = [ "stm32-metapac/stm32c031k6" ];
          "stm32f030c6" = [ "stm32-metapac/stm32f030c6" ];
          "stm32f030c8" = [ "stm32-metapac/stm32f030c8" ];
          "stm32f030cc" = [ "stm32-metapac/stm32f030cc" ];
          "stm32f030f4" = [ "stm32-metapac/stm32f030f4" ];
          "stm32f030k6" = [ "stm32-metapac/stm32f030k6" ];
          "stm32f030r8" = [ "stm32-metapac/stm32f030r8" ];
          "stm32f030rc" = [ "stm32-metapac/stm32f030rc" ];
          "stm32f031c4" = [ "stm32-metapac/stm32f031c4" ];
          "stm32f031c6" = [ "stm32-metapac/stm32f031c6" ];
          "stm32f031e6" = [ "stm32-metapac/stm32f031e6" ];
          "stm32f031f4" = [ "stm32-metapac/stm32f031f4" ];
          "stm32f031f6" = [ "stm32-metapac/stm32f031f6" ];
          "stm32f031g4" = [ "stm32-metapac/stm32f031g4" ];
          "stm32f031g6" = [ "stm32-metapac/stm32f031g6" ];
          "stm32f031k4" = [ "stm32-metapac/stm32f031k4" ];
          "stm32f031k6" = [ "stm32-metapac/stm32f031k6" ];
          "stm32f038c6" = [ "stm32-metapac/stm32f038c6" ];
          "stm32f038e6" = [ "stm32-metapac/stm32f038e6" ];
          "stm32f038f6" = [ "stm32-metapac/stm32f038f6" ];
          "stm32f038g6" = [ "stm32-metapac/stm32f038g6" ];
          "stm32f038k6" = [ "stm32-metapac/stm32f038k6" ];
          "stm32f042c4" = [ "stm32-metapac/stm32f042c4" ];
          "stm32f042c6" = [ "stm32-metapac/stm32f042c6" ];
          "stm32f042f4" = [ "stm32-metapac/stm32f042f4" ];
          "stm32f042f6" = [ "stm32-metapac/stm32f042f6" ];
          "stm32f042g4" = [ "stm32-metapac/stm32f042g4" ];
          "stm32f042g6" = [ "stm32-metapac/stm32f042g6" ];
          "stm32f042k4" = [ "stm32-metapac/stm32f042k4" ];
          "stm32f042k6" = [ "stm32-metapac/stm32f042k6" ];
          "stm32f042t6" = [ "stm32-metapac/stm32f042t6" ];
          "stm32f048c6" = [ "stm32-metapac/stm32f048c6" ];
          "stm32f048g6" = [ "stm32-metapac/stm32f048g6" ];
          "stm32f048t6" = [ "stm32-metapac/stm32f048t6" ];
          "stm32f051c4" = [ "stm32-metapac/stm32f051c4" ];
          "stm32f051c6" = [ "stm32-metapac/stm32f051c6" ];
          "stm32f051c8" = [ "stm32-metapac/stm32f051c8" ];
          "stm32f051k4" = [ "stm32-metapac/stm32f051k4" ];
          "stm32f051k6" = [ "stm32-metapac/stm32f051k6" ];
          "stm32f051k8" = [ "stm32-metapac/stm32f051k8" ];
          "stm32f051r4" = [ "stm32-metapac/stm32f051r4" ];
          "stm32f051r6" = [ "stm32-metapac/stm32f051r6" ];
          "stm32f051r8" = [ "stm32-metapac/stm32f051r8" ];
          "stm32f051t8" = [ "stm32-metapac/stm32f051t8" ];
          "stm32f058c8" = [ "stm32-metapac/stm32f058c8" ];
          "stm32f058r8" = [ "stm32-metapac/stm32f058r8" ];
          "stm32f058t8" = [ "stm32-metapac/stm32f058t8" ];
          "stm32f070c6" = [ "stm32-metapac/stm32f070c6" ];
          "stm32f070cb" = [ "stm32-metapac/stm32f070cb" ];
          "stm32f070f6" = [ "stm32-metapac/stm32f070f6" ];
          "stm32f070rb" = [ "stm32-metapac/stm32f070rb" ];
          "stm32f071c8" = [ "stm32-metapac/stm32f071c8" ];
          "stm32f071cb" = [ "stm32-metapac/stm32f071cb" ];
          "stm32f071rb" = [ "stm32-metapac/stm32f071rb" ];
          "stm32f071v8" = [ "stm32-metapac/stm32f071v8" ];
          "stm32f071vb" = [ "stm32-metapac/stm32f071vb" ];
          "stm32f072c8" = [ "stm32-metapac/stm32f072c8" ];
          "stm32f072cb" = [ "stm32-metapac/stm32f072cb" ];
          "stm32f072r8" = [ "stm32-metapac/stm32f072r8" ];
          "stm32f072rb" = [ "stm32-metapac/stm32f072rb" ];
          "stm32f072v8" = [ "stm32-metapac/stm32f072v8" ];
          "stm32f072vb" = [ "stm32-metapac/stm32f072vb" ];
          "stm32f078cb" = [ "stm32-metapac/stm32f078cb" ];
          "stm32f078rb" = [ "stm32-metapac/stm32f078rb" ];
          "stm32f078vb" = [ "stm32-metapac/stm32f078vb" ];
          "stm32f091cb" = [ "stm32-metapac/stm32f091cb" ];
          "stm32f091cc" = [ "stm32-metapac/stm32f091cc" ];
          "stm32f091rb" = [ "stm32-metapac/stm32f091rb" ];
          "stm32f091rc" = [ "stm32-metapac/stm32f091rc" ];
          "stm32f091vb" = [ "stm32-metapac/stm32f091vb" ];
          "stm32f091vc" = [ "stm32-metapac/stm32f091vc" ];
          "stm32f098cc" = [ "stm32-metapac/stm32f098cc" ];
          "stm32f098rc" = [ "stm32-metapac/stm32f098rc" ];
          "stm32f098vc" = [ "stm32-metapac/stm32f098vc" ];
          "stm32f100c4" = [ "stm32-metapac/stm32f100c4" ];
          "stm32f100c6" = [ "stm32-metapac/stm32f100c6" ];
          "stm32f100c8" = [ "stm32-metapac/stm32f100c8" ];
          "stm32f100cb" = [ "stm32-metapac/stm32f100cb" ];
          "stm32f100r4" = [ "stm32-metapac/stm32f100r4" ];
          "stm32f100r6" = [ "stm32-metapac/stm32f100r6" ];
          "stm32f100r8" = [ "stm32-metapac/stm32f100r8" ];
          "stm32f100rb" = [ "stm32-metapac/stm32f100rb" ];
          "stm32f100rc" = [ "stm32-metapac/stm32f100rc" ];
          "stm32f100rd" = [ "stm32-metapac/stm32f100rd" ];
          "stm32f100re" = [ "stm32-metapac/stm32f100re" ];
          "stm32f100v8" = [ "stm32-metapac/stm32f100v8" ];
          "stm32f100vb" = [ "stm32-metapac/stm32f100vb" ];
          "stm32f100vc" = [ "stm32-metapac/stm32f100vc" ];
          "stm32f100vd" = [ "stm32-metapac/stm32f100vd" ];
          "stm32f100ve" = [ "stm32-metapac/stm32f100ve" ];
          "stm32f100zc" = [ "stm32-metapac/stm32f100zc" ];
          "stm32f100zd" = [ "stm32-metapac/stm32f100zd" ];
          "stm32f100ze" = [ "stm32-metapac/stm32f100ze" ];
          "stm32f101c4" = [ "stm32-metapac/stm32f101c4" ];
          "stm32f101c6" = [ "stm32-metapac/stm32f101c6" ];
          "stm32f101c8" = [ "stm32-metapac/stm32f101c8" ];
          "stm32f101cb" = [ "stm32-metapac/stm32f101cb" ];
          "stm32f101r4" = [ "stm32-metapac/stm32f101r4" ];
          "stm32f101r6" = [ "stm32-metapac/stm32f101r6" ];
          "stm32f101r8" = [ "stm32-metapac/stm32f101r8" ];
          "stm32f101rb" = [ "stm32-metapac/stm32f101rb" ];
          "stm32f101rc" = [ "stm32-metapac/stm32f101rc" ];
          "stm32f101rd" = [ "stm32-metapac/stm32f101rd" ];
          "stm32f101re" = [ "stm32-metapac/stm32f101re" ];
          "stm32f101rf" = [ "stm32-metapac/stm32f101rf" ];
          "stm32f101rg" = [ "stm32-metapac/stm32f101rg" ];
          "stm32f101t4" = [ "stm32-metapac/stm32f101t4" ];
          "stm32f101t6" = [ "stm32-metapac/stm32f101t6" ];
          "stm32f101t8" = [ "stm32-metapac/stm32f101t8" ];
          "stm32f101tb" = [ "stm32-metapac/stm32f101tb" ];
          "stm32f101v8" = [ "stm32-metapac/stm32f101v8" ];
          "stm32f101vb" = [ "stm32-metapac/stm32f101vb" ];
          "stm32f101vc" = [ "stm32-metapac/stm32f101vc" ];
          "stm32f101vd" = [ "stm32-metapac/stm32f101vd" ];
          "stm32f101ve" = [ "stm32-metapac/stm32f101ve" ];
          "stm32f101vf" = [ "stm32-metapac/stm32f101vf" ];
          "stm32f101vg" = [ "stm32-metapac/stm32f101vg" ];
          "stm32f101zc" = [ "stm32-metapac/stm32f101zc" ];
          "stm32f101zd" = [ "stm32-metapac/stm32f101zd" ];
          "stm32f101ze" = [ "stm32-metapac/stm32f101ze" ];
          "stm32f101zf" = [ "stm32-metapac/stm32f101zf" ];
          "stm32f101zg" = [ "stm32-metapac/stm32f101zg" ];
          "stm32f102c4" = [ "stm32-metapac/stm32f102c4" ];
          "stm32f102c6" = [ "stm32-metapac/stm32f102c6" ];
          "stm32f102c8" = [ "stm32-metapac/stm32f102c8" ];
          "stm32f102cb" = [ "stm32-metapac/stm32f102cb" ];
          "stm32f102r4" = [ "stm32-metapac/stm32f102r4" ];
          "stm32f102r6" = [ "stm32-metapac/stm32f102r6" ];
          "stm32f102r8" = [ "stm32-metapac/stm32f102r8" ];
          "stm32f102rb" = [ "stm32-metapac/stm32f102rb" ];
          "stm32f103c4" = [ "stm32-metapac/stm32f103c4" ];
          "stm32f103c6" = [ "stm32-metapac/stm32f103c6" ];
          "stm32f103c8" = [ "stm32-metapac/stm32f103c8" ];
          "stm32f103cb" = [ "stm32-metapac/stm32f103cb" ];
          "stm32f103r4" = [ "stm32-metapac/stm32f103r4" ];
          "stm32f103r6" = [ "stm32-metapac/stm32f103r6" ];
          "stm32f103r8" = [ "stm32-metapac/stm32f103r8" ];
          "stm32f103rb" = [ "stm32-metapac/stm32f103rb" ];
          "stm32f103rc" = [ "stm32-metapac/stm32f103rc" ];
          "stm32f103rd" = [ "stm32-metapac/stm32f103rd" ];
          "stm32f103re" = [ "stm32-metapac/stm32f103re" ];
          "stm32f103rf" = [ "stm32-metapac/stm32f103rf" ];
          "stm32f103rg" = [ "stm32-metapac/stm32f103rg" ];
          "stm32f103t4" = [ "stm32-metapac/stm32f103t4" ];
          "stm32f103t6" = [ "stm32-metapac/stm32f103t6" ];
          "stm32f103t8" = [ "stm32-metapac/stm32f103t8" ];
          "stm32f103tb" = [ "stm32-metapac/stm32f103tb" ];
          "stm32f103v8" = [ "stm32-metapac/stm32f103v8" ];
          "stm32f103vb" = [ "stm32-metapac/stm32f103vb" ];
          "stm32f103vc" = [ "stm32-metapac/stm32f103vc" ];
          "stm32f103vd" = [ "stm32-metapac/stm32f103vd" ];
          "stm32f103ve" = [ "stm32-metapac/stm32f103ve" ];
          "stm32f103vf" = [ "stm32-metapac/stm32f103vf" ];
          "stm32f103vg" = [ "stm32-metapac/stm32f103vg" ];
          "stm32f103zc" = [ "stm32-metapac/stm32f103zc" ];
          "stm32f103zd" = [ "stm32-metapac/stm32f103zd" ];
          "stm32f103ze" = [ "stm32-metapac/stm32f103ze" ];
          "stm32f103zf" = [ "stm32-metapac/stm32f103zf" ];
          "stm32f103zg" = [ "stm32-metapac/stm32f103zg" ];
          "stm32f105r8" = [ "stm32-metapac/stm32f105r8" ];
          "stm32f105rb" = [ "stm32-metapac/stm32f105rb" ];
          "stm32f105rc" = [ "stm32-metapac/stm32f105rc" ];
          "stm32f105v8" = [ "stm32-metapac/stm32f105v8" ];
          "stm32f105vb" = [ "stm32-metapac/stm32f105vb" ];
          "stm32f105vc" = [ "stm32-metapac/stm32f105vc" ];
          "stm32f107rb" = [ "stm32-metapac/stm32f107rb" ];
          "stm32f107rc" = [ "stm32-metapac/stm32f107rc" ];
          "stm32f107vb" = [ "stm32-metapac/stm32f107vb" ];
          "stm32f107vc" = [ "stm32-metapac/stm32f107vc" ];
          "stm32f205rb" = [ "stm32-metapac/stm32f205rb" ];
          "stm32f205rc" = [ "stm32-metapac/stm32f205rc" ];
          "stm32f205re" = [ "stm32-metapac/stm32f205re" ];
          "stm32f205rf" = [ "stm32-metapac/stm32f205rf" ];
          "stm32f205rg" = [ "stm32-metapac/stm32f205rg" ];
          "stm32f205vb" = [ "stm32-metapac/stm32f205vb" ];
          "stm32f205vc" = [ "stm32-metapac/stm32f205vc" ];
          "stm32f205ve" = [ "stm32-metapac/stm32f205ve" ];
          "stm32f205vf" = [ "stm32-metapac/stm32f205vf" ];
          "stm32f205vg" = [ "stm32-metapac/stm32f205vg" ];
          "stm32f205zc" = [ "stm32-metapac/stm32f205zc" ];
          "stm32f205ze" = [ "stm32-metapac/stm32f205ze" ];
          "stm32f205zf" = [ "stm32-metapac/stm32f205zf" ];
          "stm32f205zg" = [ "stm32-metapac/stm32f205zg" ];
          "stm32f207ic" = [ "stm32-metapac/stm32f207ic" ];
          "stm32f207ie" = [ "stm32-metapac/stm32f207ie" ];
          "stm32f207if" = [ "stm32-metapac/stm32f207if" ];
          "stm32f207ig" = [ "stm32-metapac/stm32f207ig" ];
          "stm32f207vc" = [ "stm32-metapac/stm32f207vc" ];
          "stm32f207ve" = [ "stm32-metapac/stm32f207ve" ];
          "stm32f207vf" = [ "stm32-metapac/stm32f207vf" ];
          "stm32f207vg" = [ "stm32-metapac/stm32f207vg" ];
          "stm32f207zc" = [ "stm32-metapac/stm32f207zc" ];
          "stm32f207ze" = [ "stm32-metapac/stm32f207ze" ];
          "stm32f207zf" = [ "stm32-metapac/stm32f207zf" ];
          "stm32f207zg" = [ "stm32-metapac/stm32f207zg" ];
          "stm32f215re" = [ "stm32-metapac/stm32f215re" ];
          "stm32f215rg" = [ "stm32-metapac/stm32f215rg" ];
          "stm32f215ve" = [ "stm32-metapac/stm32f215ve" ];
          "stm32f215vg" = [ "stm32-metapac/stm32f215vg" ];
          "stm32f215ze" = [ "stm32-metapac/stm32f215ze" ];
          "stm32f215zg" = [ "stm32-metapac/stm32f215zg" ];
          "stm32f217ie" = [ "stm32-metapac/stm32f217ie" ];
          "stm32f217ig" = [ "stm32-metapac/stm32f217ig" ];
          "stm32f217ve" = [ "stm32-metapac/stm32f217ve" ];
          "stm32f217vg" = [ "stm32-metapac/stm32f217vg" ];
          "stm32f217ze" = [ "stm32-metapac/stm32f217ze" ];
          "stm32f217zg" = [ "stm32-metapac/stm32f217zg" ];
          "stm32f301c6" = [ "stm32-metapac/stm32f301c6" ];
          "stm32f301c8" = [ "stm32-metapac/stm32f301c8" ];
          "stm32f301k6" = [ "stm32-metapac/stm32f301k6" ];
          "stm32f301k8" = [ "stm32-metapac/stm32f301k8" ];
          "stm32f301r6" = [ "stm32-metapac/stm32f301r6" ];
          "stm32f301r8" = [ "stm32-metapac/stm32f301r8" ];
          "stm32f302c6" = [ "stm32-metapac/stm32f302c6" ];
          "stm32f302c8" = [ "stm32-metapac/stm32f302c8" ];
          "stm32f302cb" = [ "stm32-metapac/stm32f302cb" ];
          "stm32f302cc" = [ "stm32-metapac/stm32f302cc" ];
          "stm32f302k6" = [ "stm32-metapac/stm32f302k6" ];
          "stm32f302k8" = [ "stm32-metapac/stm32f302k8" ];
          "stm32f302r6" = [ "stm32-metapac/stm32f302r6" ];
          "stm32f302r8" = [ "stm32-metapac/stm32f302r8" ];
          "stm32f302rb" = [ "stm32-metapac/stm32f302rb" ];
          "stm32f302rc" = [ "stm32-metapac/stm32f302rc" ];
          "stm32f302rd" = [ "stm32-metapac/stm32f302rd" ];
          "stm32f302re" = [ "stm32-metapac/stm32f302re" ];
          "stm32f302vb" = [ "stm32-metapac/stm32f302vb" ];
          "stm32f302vc" = [ "stm32-metapac/stm32f302vc" ];
          "stm32f302vd" = [ "stm32-metapac/stm32f302vd" ];
          "stm32f302ve" = [ "stm32-metapac/stm32f302ve" ];
          "stm32f302zd" = [ "stm32-metapac/stm32f302zd" ];
          "stm32f302ze" = [ "stm32-metapac/stm32f302ze" ];
          "stm32f303c6" = [ "stm32-metapac/stm32f303c6" ];
          "stm32f303c8" = [ "stm32-metapac/stm32f303c8" ];
          "stm32f303cb" = [ "stm32-metapac/stm32f303cb" ];
          "stm32f303cc" = [ "stm32-metapac/stm32f303cc" ];
          "stm32f303k6" = [ "stm32-metapac/stm32f303k6" ];
          "stm32f303k8" = [ "stm32-metapac/stm32f303k8" ];
          "stm32f303r6" = [ "stm32-metapac/stm32f303r6" ];
          "stm32f303r8" = [ "stm32-metapac/stm32f303r8" ];
          "stm32f303rb" = [ "stm32-metapac/stm32f303rb" ];
          "stm32f303rc" = [ "stm32-metapac/stm32f303rc" ];
          "stm32f303rd" = [ "stm32-metapac/stm32f303rd" ];
          "stm32f303re" = [ "stm32-metapac/stm32f303re" ];
          "stm32f303vb" = [ "stm32-metapac/stm32f303vb" ];
          "stm32f303vc" = [ "stm32-metapac/stm32f303vc" ];
          "stm32f303vd" = [ "stm32-metapac/stm32f303vd" ];
          "stm32f303ve" = [ "stm32-metapac/stm32f303ve" ];
          "stm32f303zd" = [ "stm32-metapac/stm32f303zd" ];
          "stm32f303ze" = [ "stm32-metapac/stm32f303ze" ];
          "stm32f318c8" = [ "stm32-metapac/stm32f318c8" ];
          "stm32f318k8" = [ "stm32-metapac/stm32f318k8" ];
          "stm32f328c8" = [ "stm32-metapac/stm32f328c8" ];
          "stm32f334c4" = [ "stm32-metapac/stm32f334c4" ];
          "stm32f334c6" = [ "stm32-metapac/stm32f334c6" ];
          "stm32f334c8" = [ "stm32-metapac/stm32f334c8" ];
          "stm32f334k4" = [ "stm32-metapac/stm32f334k4" ];
          "stm32f334k6" = [ "stm32-metapac/stm32f334k6" ];
          "stm32f334k8" = [ "stm32-metapac/stm32f334k8" ];
          "stm32f334r6" = [ "stm32-metapac/stm32f334r6" ];
          "stm32f334r8" = [ "stm32-metapac/stm32f334r8" ];
          "stm32f358cc" = [ "stm32-metapac/stm32f358cc" ];
          "stm32f358rc" = [ "stm32-metapac/stm32f358rc" ];
          "stm32f358vc" = [ "stm32-metapac/stm32f358vc" ];
          "stm32f373c8" = [ "stm32-metapac/stm32f373c8" ];
          "stm32f373cb" = [ "stm32-metapac/stm32f373cb" ];
          "stm32f373cc" = [ "stm32-metapac/stm32f373cc" ];
          "stm32f373r8" = [ "stm32-metapac/stm32f373r8" ];
          "stm32f373rb" = [ "stm32-metapac/stm32f373rb" ];
          "stm32f373rc" = [ "stm32-metapac/stm32f373rc" ];
          "stm32f373v8" = [ "stm32-metapac/stm32f373v8" ];
          "stm32f373vb" = [ "stm32-metapac/stm32f373vb" ];
          "stm32f373vc" = [ "stm32-metapac/stm32f373vc" ];
          "stm32f378cc" = [ "stm32-metapac/stm32f378cc" ];
          "stm32f378rc" = [ "stm32-metapac/stm32f378rc" ];
          "stm32f378vc" = [ "stm32-metapac/stm32f378vc" ];
          "stm32f398ve" = [ "stm32-metapac/stm32f398ve" ];
          "stm32f401cb" = [ "stm32-metapac/stm32f401cb" ];
          "stm32f401cc" = [ "stm32-metapac/stm32f401cc" ];
          "stm32f401cd" = [ "stm32-metapac/stm32f401cd" ];
          "stm32f401ce" = [ "stm32-metapac/stm32f401ce" ];
          "stm32f401rb" = [ "stm32-metapac/stm32f401rb" ];
          "stm32f401rc" = [ "stm32-metapac/stm32f401rc" ];
          "stm32f401rd" = [ "stm32-metapac/stm32f401rd" ];
          "stm32f401re" = [ "stm32-metapac/stm32f401re" ];
          "stm32f401vb" = [ "stm32-metapac/stm32f401vb" ];
          "stm32f401vc" = [ "stm32-metapac/stm32f401vc" ];
          "stm32f401vd" = [ "stm32-metapac/stm32f401vd" ];
          "stm32f401ve" = [ "stm32-metapac/stm32f401ve" ];
          "stm32f405oe" = [ "stm32-metapac/stm32f405oe" ];
          "stm32f405og" = [ "stm32-metapac/stm32f405og" ];
          "stm32f405rg" = [ "stm32-metapac/stm32f405rg" ];
          "stm32f405vg" = [ "stm32-metapac/stm32f405vg" ];
          "stm32f405zg" = [ "stm32-metapac/stm32f405zg" ];
          "stm32f407ie" = [ "stm32-metapac/stm32f407ie" ];
          "stm32f407ig" = [ "stm32-metapac/stm32f407ig" ];
          "stm32f407ve" = [ "stm32-metapac/stm32f407ve" ];
          "stm32f407vg" = [ "stm32-metapac/stm32f407vg" ];
          "stm32f407ze" = [ "stm32-metapac/stm32f407ze" ];
          "stm32f407zg" = [ "stm32-metapac/stm32f407zg" ];
          "stm32f410c8" = [ "stm32-metapac/stm32f410c8" ];
          "stm32f410cb" = [ "stm32-metapac/stm32f410cb" ];
          "stm32f410r8" = [ "stm32-metapac/stm32f410r8" ];
          "stm32f410rb" = [ "stm32-metapac/stm32f410rb" ];
          "stm32f410t8" = [ "stm32-metapac/stm32f410t8" ];
          "stm32f410tb" = [ "stm32-metapac/stm32f410tb" ];
          "stm32f411cc" = [ "stm32-metapac/stm32f411cc" ];
          "stm32f411ce" = [ "stm32-metapac/stm32f411ce" ];
          "stm32f411rc" = [ "stm32-metapac/stm32f411rc" ];
          "stm32f411re" = [ "stm32-metapac/stm32f411re" ];
          "stm32f411vc" = [ "stm32-metapac/stm32f411vc" ];
          "stm32f411ve" = [ "stm32-metapac/stm32f411ve" ];
          "stm32f412ce" = [ "stm32-metapac/stm32f412ce" ];
          "stm32f412cg" = [ "stm32-metapac/stm32f412cg" ];
          "stm32f412re" = [ "stm32-metapac/stm32f412re" ];
          "stm32f412rg" = [ "stm32-metapac/stm32f412rg" ];
          "stm32f412ve" = [ "stm32-metapac/stm32f412ve" ];
          "stm32f412vg" = [ "stm32-metapac/stm32f412vg" ];
          "stm32f412ze" = [ "stm32-metapac/stm32f412ze" ];
          "stm32f412zg" = [ "stm32-metapac/stm32f412zg" ];
          "stm32f413cg" = [ "stm32-metapac/stm32f413cg" ];
          "stm32f413ch" = [ "stm32-metapac/stm32f413ch" ];
          "stm32f413mg" = [ "stm32-metapac/stm32f413mg" ];
          "stm32f413mh" = [ "stm32-metapac/stm32f413mh" ];
          "stm32f413rg" = [ "stm32-metapac/stm32f413rg" ];
          "stm32f413rh" = [ "stm32-metapac/stm32f413rh" ];
          "stm32f413vg" = [ "stm32-metapac/stm32f413vg" ];
          "stm32f413vh" = [ "stm32-metapac/stm32f413vh" ];
          "stm32f413zg" = [ "stm32-metapac/stm32f413zg" ];
          "stm32f413zh" = [ "stm32-metapac/stm32f413zh" ];
          "stm32f415og" = [ "stm32-metapac/stm32f415og" ];
          "stm32f415rg" = [ "stm32-metapac/stm32f415rg" ];
          "stm32f415vg" = [ "stm32-metapac/stm32f415vg" ];
          "stm32f415zg" = [ "stm32-metapac/stm32f415zg" ];
          "stm32f417ie" = [ "stm32-metapac/stm32f417ie" ];
          "stm32f417ig" = [ "stm32-metapac/stm32f417ig" ];
          "stm32f417ve" = [ "stm32-metapac/stm32f417ve" ];
          "stm32f417vg" = [ "stm32-metapac/stm32f417vg" ];
          "stm32f417ze" = [ "stm32-metapac/stm32f417ze" ];
          "stm32f417zg" = [ "stm32-metapac/stm32f417zg" ];
          "stm32f423ch" = [ "stm32-metapac/stm32f423ch" ];
          "stm32f423mh" = [ "stm32-metapac/stm32f423mh" ];
          "stm32f423rh" = [ "stm32-metapac/stm32f423rh" ];
          "stm32f423vh" = [ "stm32-metapac/stm32f423vh" ];
          "stm32f423zh" = [ "stm32-metapac/stm32f423zh" ];
          "stm32f427ag" = [ "stm32-metapac/stm32f427ag" ];
          "stm32f427ai" = [ "stm32-metapac/stm32f427ai" ];
          "stm32f427ig" = [ "stm32-metapac/stm32f427ig" ];
          "stm32f427ii" = [ "stm32-metapac/stm32f427ii" ];
          "stm32f427vg" = [ "stm32-metapac/stm32f427vg" ];
          "stm32f427vi" = [ "stm32-metapac/stm32f427vi" ];
          "stm32f427zg" = [ "stm32-metapac/stm32f427zg" ];
          "stm32f427zi" = [ "stm32-metapac/stm32f427zi" ];
          "stm32f429ag" = [ "stm32-metapac/stm32f429ag" ];
          "stm32f429ai" = [ "stm32-metapac/stm32f429ai" ];
          "stm32f429be" = [ "stm32-metapac/stm32f429be" ];
          "stm32f429bg" = [ "stm32-metapac/stm32f429bg" ];
          "stm32f429bi" = [ "stm32-metapac/stm32f429bi" ];
          "stm32f429ie" = [ "stm32-metapac/stm32f429ie" ];
          "stm32f429ig" = [ "stm32-metapac/stm32f429ig" ];
          "stm32f429ii" = [ "stm32-metapac/stm32f429ii" ];
          "stm32f429ne" = [ "stm32-metapac/stm32f429ne" ];
          "stm32f429ng" = [ "stm32-metapac/stm32f429ng" ];
          "stm32f429ni" = [ "stm32-metapac/stm32f429ni" ];
          "stm32f429ve" = [ "stm32-metapac/stm32f429ve" ];
          "stm32f429vg" = [ "stm32-metapac/stm32f429vg" ];
          "stm32f429vi" = [ "stm32-metapac/stm32f429vi" ];
          "stm32f429ze" = [ "stm32-metapac/stm32f429ze" ];
          "stm32f429zg" = [ "stm32-metapac/stm32f429zg" ];
          "stm32f429zi" = [ "stm32-metapac/stm32f429zi" ];
          "stm32f437ai" = [ "stm32-metapac/stm32f437ai" ];
          "stm32f437ig" = [ "stm32-metapac/stm32f437ig" ];
          "stm32f437ii" = [ "stm32-metapac/stm32f437ii" ];
          "stm32f437vg" = [ "stm32-metapac/stm32f437vg" ];
          "stm32f437vi" = [ "stm32-metapac/stm32f437vi" ];
          "stm32f437zg" = [ "stm32-metapac/stm32f437zg" ];
          "stm32f437zi" = [ "stm32-metapac/stm32f437zi" ];
          "stm32f439ai" = [ "stm32-metapac/stm32f439ai" ];
          "stm32f439bg" = [ "stm32-metapac/stm32f439bg" ];
          "stm32f439bi" = [ "stm32-metapac/stm32f439bi" ];
          "stm32f439ig" = [ "stm32-metapac/stm32f439ig" ];
          "stm32f439ii" = [ "stm32-metapac/stm32f439ii" ];
          "stm32f439ng" = [ "stm32-metapac/stm32f439ng" ];
          "stm32f439ni" = [ "stm32-metapac/stm32f439ni" ];
          "stm32f439vg" = [ "stm32-metapac/stm32f439vg" ];
          "stm32f439vi" = [ "stm32-metapac/stm32f439vi" ];
          "stm32f439zg" = [ "stm32-metapac/stm32f439zg" ];
          "stm32f439zi" = [ "stm32-metapac/stm32f439zi" ];
          "stm32f446mc" = [ "stm32-metapac/stm32f446mc" ];
          "stm32f446me" = [ "stm32-metapac/stm32f446me" ];
          "stm32f446rc" = [ "stm32-metapac/stm32f446rc" ];
          "stm32f446re" = [ "stm32-metapac/stm32f446re" ];
          "stm32f446vc" = [ "stm32-metapac/stm32f446vc" ];
          "stm32f446ve" = [ "stm32-metapac/stm32f446ve" ];
          "stm32f446zc" = [ "stm32-metapac/stm32f446zc" ];
          "stm32f446ze" = [ "stm32-metapac/stm32f446ze" ];
          "stm32f469ae" = [ "stm32-metapac/stm32f469ae" ];
          "stm32f469ag" = [ "stm32-metapac/stm32f469ag" ];
          "stm32f469ai" = [ "stm32-metapac/stm32f469ai" ];
          "stm32f469be" = [ "stm32-metapac/stm32f469be" ];
          "stm32f469bg" = [ "stm32-metapac/stm32f469bg" ];
          "stm32f469bi" = [ "stm32-metapac/stm32f469bi" ];
          "stm32f469ie" = [ "stm32-metapac/stm32f469ie" ];
          "stm32f469ig" = [ "stm32-metapac/stm32f469ig" ];
          "stm32f469ii" = [ "stm32-metapac/stm32f469ii" ];
          "stm32f469ne" = [ "stm32-metapac/stm32f469ne" ];
          "stm32f469ng" = [ "stm32-metapac/stm32f469ng" ];
          "stm32f469ni" = [ "stm32-metapac/stm32f469ni" ];
          "stm32f469ve" = [ "stm32-metapac/stm32f469ve" ];
          "stm32f469vg" = [ "stm32-metapac/stm32f469vg" ];
          "stm32f469vi" = [ "stm32-metapac/stm32f469vi" ];
          "stm32f469ze" = [ "stm32-metapac/stm32f469ze" ];
          "stm32f469zg" = [ "stm32-metapac/stm32f469zg" ];
          "stm32f469zi" = [ "stm32-metapac/stm32f469zi" ];
          "stm32f479ag" = [ "stm32-metapac/stm32f479ag" ];
          "stm32f479ai" = [ "stm32-metapac/stm32f479ai" ];
          "stm32f479bg" = [ "stm32-metapac/stm32f479bg" ];
          "stm32f479bi" = [ "stm32-metapac/stm32f479bi" ];
          "stm32f479ig" = [ "stm32-metapac/stm32f479ig" ];
          "stm32f479ii" = [ "stm32-metapac/stm32f479ii" ];
          "stm32f479ng" = [ "stm32-metapac/stm32f479ng" ];
          "stm32f479ni" = [ "stm32-metapac/stm32f479ni" ];
          "stm32f479vg" = [ "stm32-metapac/stm32f479vg" ];
          "stm32f479vi" = [ "stm32-metapac/stm32f479vi" ];
          "stm32f479zg" = [ "stm32-metapac/stm32f479zg" ];
          "stm32f479zi" = [ "stm32-metapac/stm32f479zi" ];
          "stm32f722ic" = [ "stm32-metapac/stm32f722ic" ];
          "stm32f722ie" = [ "stm32-metapac/stm32f722ie" ];
          "stm32f722rc" = [ "stm32-metapac/stm32f722rc" ];
          "stm32f722re" = [ "stm32-metapac/stm32f722re" ];
          "stm32f722vc" = [ "stm32-metapac/stm32f722vc" ];
          "stm32f722ve" = [ "stm32-metapac/stm32f722ve" ];
          "stm32f722zc" = [ "stm32-metapac/stm32f722zc" ];
          "stm32f722ze" = [ "stm32-metapac/stm32f722ze" ];
          "stm32f723ic" = [ "stm32-metapac/stm32f723ic" ];
          "stm32f723ie" = [ "stm32-metapac/stm32f723ie" ];
          "stm32f723vc" = [ "stm32-metapac/stm32f723vc" ];
          "stm32f723ve" = [ "stm32-metapac/stm32f723ve" ];
          "stm32f723zc" = [ "stm32-metapac/stm32f723zc" ];
          "stm32f723ze" = [ "stm32-metapac/stm32f723ze" ];
          "stm32f730i8" = [ "stm32-metapac/stm32f730i8" ];
          "stm32f730r8" = [ "stm32-metapac/stm32f730r8" ];
          "stm32f730v8" = [ "stm32-metapac/stm32f730v8" ];
          "stm32f730z8" = [ "stm32-metapac/stm32f730z8" ];
          "stm32f732ie" = [ "stm32-metapac/stm32f732ie" ];
          "stm32f732re" = [ "stm32-metapac/stm32f732re" ];
          "stm32f732ve" = [ "stm32-metapac/stm32f732ve" ];
          "stm32f732ze" = [ "stm32-metapac/stm32f732ze" ];
          "stm32f733ie" = [ "stm32-metapac/stm32f733ie" ];
          "stm32f733ve" = [ "stm32-metapac/stm32f733ve" ];
          "stm32f733ze" = [ "stm32-metapac/stm32f733ze" ];
          "stm32f745ie" = [ "stm32-metapac/stm32f745ie" ];
          "stm32f745ig" = [ "stm32-metapac/stm32f745ig" ];
          "stm32f745ve" = [ "stm32-metapac/stm32f745ve" ];
          "stm32f745vg" = [ "stm32-metapac/stm32f745vg" ];
          "stm32f745ze" = [ "stm32-metapac/stm32f745ze" ];
          "stm32f745zg" = [ "stm32-metapac/stm32f745zg" ];
          "stm32f746be" = [ "stm32-metapac/stm32f746be" ];
          "stm32f746bg" = [ "stm32-metapac/stm32f746bg" ];
          "stm32f746ie" = [ "stm32-metapac/stm32f746ie" ];
          "stm32f746ig" = [ "stm32-metapac/stm32f746ig" ];
          "stm32f746ne" = [ "stm32-metapac/stm32f746ne" ];
          "stm32f746ng" = [ "stm32-metapac/stm32f746ng" ];
          "stm32f746ve" = [ "stm32-metapac/stm32f746ve" ];
          "stm32f746vg" = [ "stm32-metapac/stm32f746vg" ];
          "stm32f746ze" = [ "stm32-metapac/stm32f746ze" ];
          "stm32f746zg" = [ "stm32-metapac/stm32f746zg" ];
          "stm32f750n8" = [ "stm32-metapac/stm32f750n8" ];
          "stm32f750v8" = [ "stm32-metapac/stm32f750v8" ];
          "stm32f750z8" = [ "stm32-metapac/stm32f750z8" ];
          "stm32f756bg" = [ "stm32-metapac/stm32f756bg" ];
          "stm32f756ig" = [ "stm32-metapac/stm32f756ig" ];
          "stm32f756ng" = [ "stm32-metapac/stm32f756ng" ];
          "stm32f756vg" = [ "stm32-metapac/stm32f756vg" ];
          "stm32f756zg" = [ "stm32-metapac/stm32f756zg" ];
          "stm32f765bg" = [ "stm32-metapac/stm32f765bg" ];
          "stm32f765bi" = [ "stm32-metapac/stm32f765bi" ];
          "stm32f765ig" = [ "stm32-metapac/stm32f765ig" ];
          "stm32f765ii" = [ "stm32-metapac/stm32f765ii" ];
          "stm32f765ng" = [ "stm32-metapac/stm32f765ng" ];
          "stm32f765ni" = [ "stm32-metapac/stm32f765ni" ];
          "stm32f765vg" = [ "stm32-metapac/stm32f765vg" ];
          "stm32f765vi" = [ "stm32-metapac/stm32f765vi" ];
          "stm32f765zg" = [ "stm32-metapac/stm32f765zg" ];
          "stm32f765zi" = [ "stm32-metapac/stm32f765zi" ];
          "stm32f767bg" = [ "stm32-metapac/stm32f767bg" ];
          "stm32f767bi" = [ "stm32-metapac/stm32f767bi" ];
          "stm32f767ig" = [ "stm32-metapac/stm32f767ig" ];
          "stm32f767ii" = [ "stm32-metapac/stm32f767ii" ];
          "stm32f767ng" = [ "stm32-metapac/stm32f767ng" ];
          "stm32f767ni" = [ "stm32-metapac/stm32f767ni" ];
          "stm32f767vg" = [ "stm32-metapac/stm32f767vg" ];
          "stm32f767vi" = [ "stm32-metapac/stm32f767vi" ];
          "stm32f767zg" = [ "stm32-metapac/stm32f767zg" ];
          "stm32f767zi" = [ "stm32-metapac/stm32f767zi" ];
          "stm32f768ai" = [ "stm32-metapac/stm32f768ai" ];
          "stm32f769ag" = [ "stm32-metapac/stm32f769ag" ];
          "stm32f769ai" = [ "stm32-metapac/stm32f769ai" ];
          "stm32f769bg" = [ "stm32-metapac/stm32f769bg" ];
          "stm32f769bi" = [ "stm32-metapac/stm32f769bi" ];
          "stm32f769ig" = [ "stm32-metapac/stm32f769ig" ];
          "stm32f769ii" = [ "stm32-metapac/stm32f769ii" ];
          "stm32f769ng" = [ "stm32-metapac/stm32f769ng" ];
          "stm32f769ni" = [ "stm32-metapac/stm32f769ni" ];
          "stm32f777bi" = [ "stm32-metapac/stm32f777bi" ];
          "stm32f777ii" = [ "stm32-metapac/stm32f777ii" ];
          "stm32f777ni" = [ "stm32-metapac/stm32f777ni" ];
          "stm32f777vi" = [ "stm32-metapac/stm32f777vi" ];
          "stm32f777zi" = [ "stm32-metapac/stm32f777zi" ];
          "stm32f778ai" = [ "stm32-metapac/stm32f778ai" ];
          "stm32f779ai" = [ "stm32-metapac/stm32f779ai" ];
          "stm32f779bi" = [ "stm32-metapac/stm32f779bi" ];
          "stm32f779ii" = [ "stm32-metapac/stm32f779ii" ];
          "stm32f779ni" = [ "stm32-metapac/stm32f779ni" ];
          "stm32g030c6" = [ "stm32-metapac/stm32g030c6" ];
          "stm32g030c8" = [ "stm32-metapac/stm32g030c8" ];
          "stm32g030f6" = [ "stm32-metapac/stm32g030f6" ];
          "stm32g030j6" = [ "stm32-metapac/stm32g030j6" ];
          "stm32g030k6" = [ "stm32-metapac/stm32g030k6" ];
          "stm32g030k8" = [ "stm32-metapac/stm32g030k8" ];
          "stm32g031c4" = [ "stm32-metapac/stm32g031c4" ];
          "stm32g031c6" = [ "stm32-metapac/stm32g031c6" ];
          "stm32g031c8" = [ "stm32-metapac/stm32g031c8" ];
          "stm32g031f4" = [ "stm32-metapac/stm32g031f4" ];
          "stm32g031f6" = [ "stm32-metapac/stm32g031f6" ];
          "stm32g031f8" = [ "stm32-metapac/stm32g031f8" ];
          "stm32g031g4" = [ "stm32-metapac/stm32g031g4" ];
          "stm32g031g6" = [ "stm32-metapac/stm32g031g6" ];
          "stm32g031g8" = [ "stm32-metapac/stm32g031g8" ];
          "stm32g031j4" = [ "stm32-metapac/stm32g031j4" ];
          "stm32g031j6" = [ "stm32-metapac/stm32g031j6" ];
          "stm32g031k4" = [ "stm32-metapac/stm32g031k4" ];
          "stm32g031k6" = [ "stm32-metapac/stm32g031k6" ];
          "stm32g031k8" = [ "stm32-metapac/stm32g031k8" ];
          "stm32g031y8" = [ "stm32-metapac/stm32g031y8" ];
          "stm32g041c6" = [ "stm32-metapac/stm32g041c6" ];
          "stm32g041c8" = [ "stm32-metapac/stm32g041c8" ];
          "stm32g041f6" = [ "stm32-metapac/stm32g041f6" ];
          "stm32g041f8" = [ "stm32-metapac/stm32g041f8" ];
          "stm32g041g6" = [ "stm32-metapac/stm32g041g6" ];
          "stm32g041g8" = [ "stm32-metapac/stm32g041g8" ];
          "stm32g041j6" = [ "stm32-metapac/stm32g041j6" ];
          "stm32g041k6" = [ "stm32-metapac/stm32g041k6" ];
          "stm32g041k8" = [ "stm32-metapac/stm32g041k8" ];
          "stm32g041y8" = [ "stm32-metapac/stm32g041y8" ];
          "stm32g050c6" = [ "stm32-metapac/stm32g050c6" ];
          "stm32g050c8" = [ "stm32-metapac/stm32g050c8" ];
          "stm32g050f6" = [ "stm32-metapac/stm32g050f6" ];
          "stm32g050k6" = [ "stm32-metapac/stm32g050k6" ];
          "stm32g050k8" = [ "stm32-metapac/stm32g050k8" ];
          "stm32g051c6" = [ "stm32-metapac/stm32g051c6" ];
          "stm32g051c8" = [ "stm32-metapac/stm32g051c8" ];
          "stm32g051f6" = [ "stm32-metapac/stm32g051f6" ];
          "stm32g051f8" = [ "stm32-metapac/stm32g051f8" ];
          "stm32g051g6" = [ "stm32-metapac/stm32g051g6" ];
          "stm32g051g8" = [ "stm32-metapac/stm32g051g8" ];
          "stm32g051k6" = [ "stm32-metapac/stm32g051k6" ];
          "stm32g051k8" = [ "stm32-metapac/stm32g051k8" ];
          "stm32g061c6" = [ "stm32-metapac/stm32g061c6" ];
          "stm32g061c8" = [ "stm32-metapac/stm32g061c8" ];
          "stm32g061f6" = [ "stm32-metapac/stm32g061f6" ];
          "stm32g061f8" = [ "stm32-metapac/stm32g061f8" ];
          "stm32g061g6" = [ "stm32-metapac/stm32g061g6" ];
          "stm32g061g8" = [ "stm32-metapac/stm32g061g8" ];
          "stm32g061k6" = [ "stm32-metapac/stm32g061k6" ];
          "stm32g061k8" = [ "stm32-metapac/stm32g061k8" ];
          "stm32g070cb" = [ "stm32-metapac/stm32g070cb" ];
          "stm32g070kb" = [ "stm32-metapac/stm32g070kb" ];
          "stm32g070rb" = [ "stm32-metapac/stm32g070rb" ];
          "stm32g071c6" = [ "stm32-metapac/stm32g071c6" ];
          "stm32g071c8" = [ "stm32-metapac/stm32g071c8" ];
          "stm32g071cb" = [ "stm32-metapac/stm32g071cb" ];
          "stm32g071eb" = [ "stm32-metapac/stm32g071eb" ];
          "stm32g071g6" = [ "stm32-metapac/stm32g071g6" ];
          "stm32g071g8" = [ "stm32-metapac/stm32g071g8" ];
          "stm32g071gb" = [ "stm32-metapac/stm32g071gb" ];
          "stm32g071k6" = [ "stm32-metapac/stm32g071k6" ];
          "stm32g071k8" = [ "stm32-metapac/stm32g071k8" ];
          "stm32g071kb" = [ "stm32-metapac/stm32g071kb" ];
          "stm32g071r6" = [ "stm32-metapac/stm32g071r6" ];
          "stm32g071r8" = [ "stm32-metapac/stm32g071r8" ];
          "stm32g071rb" = [ "stm32-metapac/stm32g071rb" ];
          "stm32g081cb" = [ "stm32-metapac/stm32g081cb" ];
          "stm32g081eb" = [ "stm32-metapac/stm32g081eb" ];
          "stm32g081gb" = [ "stm32-metapac/stm32g081gb" ];
          "stm32g081kb" = [ "stm32-metapac/stm32g081kb" ];
          "stm32g081rb" = [ "stm32-metapac/stm32g081rb" ];
          "stm32g0b0ce" = [ "stm32-metapac/stm32g0b0ce" ];
          "stm32g0b0ke" = [ "stm32-metapac/stm32g0b0ke" ];
          "stm32g0b0re" = [ "stm32-metapac/stm32g0b0re" ];
          "stm32g0b0ve" = [ "stm32-metapac/stm32g0b0ve" ];
          "stm32g0b1cb" = [ "stm32-metapac/stm32g0b1cb" ];
          "stm32g0b1cc" = [ "stm32-metapac/stm32g0b1cc" ];
          "stm32g0b1ce" = [ "stm32-metapac/stm32g0b1ce" ];
          "stm32g0b1kb" = [ "stm32-metapac/stm32g0b1kb" ];
          "stm32g0b1kc" = [ "stm32-metapac/stm32g0b1kc" ];
          "stm32g0b1ke" = [ "stm32-metapac/stm32g0b1ke" ];
          "stm32g0b1mb" = [ "stm32-metapac/stm32g0b1mb" ];
          "stm32g0b1mc" = [ "stm32-metapac/stm32g0b1mc" ];
          "stm32g0b1me" = [ "stm32-metapac/stm32g0b1me" ];
          "stm32g0b1ne" = [ "stm32-metapac/stm32g0b1ne" ];
          "stm32g0b1rb" = [ "stm32-metapac/stm32g0b1rb" ];
          "stm32g0b1rc" = [ "stm32-metapac/stm32g0b1rc" ];
          "stm32g0b1re" = [ "stm32-metapac/stm32g0b1re" ];
          "stm32g0b1vb" = [ "stm32-metapac/stm32g0b1vb" ];
          "stm32g0b1vc" = [ "stm32-metapac/stm32g0b1vc" ];
          "stm32g0b1ve" = [ "stm32-metapac/stm32g0b1ve" ];
          "stm32g0c1cc" = [ "stm32-metapac/stm32g0c1cc" ];
          "stm32g0c1ce" = [ "stm32-metapac/stm32g0c1ce" ];
          "stm32g0c1kc" = [ "stm32-metapac/stm32g0c1kc" ];
          "stm32g0c1ke" = [ "stm32-metapac/stm32g0c1ke" ];
          "stm32g0c1mc" = [ "stm32-metapac/stm32g0c1mc" ];
          "stm32g0c1me" = [ "stm32-metapac/stm32g0c1me" ];
          "stm32g0c1ne" = [ "stm32-metapac/stm32g0c1ne" ];
          "stm32g0c1rc" = [ "stm32-metapac/stm32g0c1rc" ];
          "stm32g0c1re" = [ "stm32-metapac/stm32g0c1re" ];
          "stm32g0c1vc" = [ "stm32-metapac/stm32g0c1vc" ];
          "stm32g0c1ve" = [ "stm32-metapac/stm32g0c1ve" ];
          "stm32g431c6" = [ "stm32-metapac/stm32g431c6" ];
          "stm32g431c8" = [ "stm32-metapac/stm32g431c8" ];
          "stm32g431cb" = [ "stm32-metapac/stm32g431cb" ];
          "stm32g431k6" = [ "stm32-metapac/stm32g431k6" ];
          "stm32g431k8" = [ "stm32-metapac/stm32g431k8" ];
          "stm32g431kb" = [ "stm32-metapac/stm32g431kb" ];
          "stm32g431m6" = [ "stm32-metapac/stm32g431m6" ];
          "stm32g431m8" = [ "stm32-metapac/stm32g431m8" ];
          "stm32g431mb" = [ "stm32-metapac/stm32g431mb" ];
          "stm32g431r6" = [ "stm32-metapac/stm32g431r6" ];
          "stm32g431r8" = [ "stm32-metapac/stm32g431r8" ];
          "stm32g431rb" = [ "stm32-metapac/stm32g431rb" ];
          "stm32g431v6" = [ "stm32-metapac/stm32g431v6" ];
          "stm32g431v8" = [ "stm32-metapac/stm32g431v8" ];
          "stm32g431vb" = [ "stm32-metapac/stm32g431vb" ];
          "stm32g441cb" = [ "stm32-metapac/stm32g441cb" ];
          "stm32g441kb" = [ "stm32-metapac/stm32g441kb" ];
          "stm32g441mb" = [ "stm32-metapac/stm32g441mb" ];
          "stm32g441rb" = [ "stm32-metapac/stm32g441rb" ];
          "stm32g441vb" = [ "stm32-metapac/stm32g441vb" ];
          "stm32g471cc" = [ "stm32-metapac/stm32g471cc" ];
          "stm32g471ce" = [ "stm32-metapac/stm32g471ce" ];
          "stm32g471mc" = [ "stm32-metapac/stm32g471mc" ];
          "stm32g471me" = [ "stm32-metapac/stm32g471me" ];
          "stm32g471qc" = [ "stm32-metapac/stm32g471qc" ];
          "stm32g471qe" = [ "stm32-metapac/stm32g471qe" ];
          "stm32g471rc" = [ "stm32-metapac/stm32g471rc" ];
          "stm32g471re" = [ "stm32-metapac/stm32g471re" ];
          "stm32g471vc" = [ "stm32-metapac/stm32g471vc" ];
          "stm32g471ve" = [ "stm32-metapac/stm32g471ve" ];
          "stm32g473cb" = [ "stm32-metapac/stm32g473cb" ];
          "stm32g473cc" = [ "stm32-metapac/stm32g473cc" ];
          "stm32g473ce" = [ "stm32-metapac/stm32g473ce" ];
          "stm32g473mb" = [ "stm32-metapac/stm32g473mb" ];
          "stm32g473mc" = [ "stm32-metapac/stm32g473mc" ];
          "stm32g473me" = [ "stm32-metapac/stm32g473me" ];
          "stm32g473pb" = [ "stm32-metapac/stm32g473pb" ];
          "stm32g473pc" = [ "stm32-metapac/stm32g473pc" ];
          "stm32g473pe" = [ "stm32-metapac/stm32g473pe" ];
          "stm32g473qb" = [ "stm32-metapac/stm32g473qb" ];
          "stm32g473qc" = [ "stm32-metapac/stm32g473qc" ];
          "stm32g473qe" = [ "stm32-metapac/stm32g473qe" ];
          "stm32g473rb" = [ "stm32-metapac/stm32g473rb" ];
          "stm32g473rc" = [ "stm32-metapac/stm32g473rc" ];
          "stm32g473re" = [ "stm32-metapac/stm32g473re" ];
          "stm32g473vb" = [ "stm32-metapac/stm32g473vb" ];
          "stm32g473vc" = [ "stm32-metapac/stm32g473vc" ];
          "stm32g473ve" = [ "stm32-metapac/stm32g473ve" ];
          "stm32g474cb" = [ "stm32-metapac/stm32g474cb" ];
          "stm32g474cc" = [ "stm32-metapac/stm32g474cc" ];
          "stm32g474ce" = [ "stm32-metapac/stm32g474ce" ];
          "stm32g474mb" = [ "stm32-metapac/stm32g474mb" ];
          "stm32g474mc" = [ "stm32-metapac/stm32g474mc" ];
          "stm32g474me" = [ "stm32-metapac/stm32g474me" ];
          "stm32g474pb" = [ "stm32-metapac/stm32g474pb" ];
          "stm32g474pc" = [ "stm32-metapac/stm32g474pc" ];
          "stm32g474pe" = [ "stm32-metapac/stm32g474pe" ];
          "stm32g474qb" = [ "stm32-metapac/stm32g474qb" ];
          "stm32g474qc" = [ "stm32-metapac/stm32g474qc" ];
          "stm32g474qe" = [ "stm32-metapac/stm32g474qe" ];
          "stm32g474rb" = [ "stm32-metapac/stm32g474rb" ];
          "stm32g474rc" = [ "stm32-metapac/stm32g474rc" ];
          "stm32g474re" = [ "stm32-metapac/stm32g474re" ];
          "stm32g474vb" = [ "stm32-metapac/stm32g474vb" ];
          "stm32g474vc" = [ "stm32-metapac/stm32g474vc" ];
          "stm32g474ve" = [ "stm32-metapac/stm32g474ve" ];
          "stm32g483ce" = [ "stm32-metapac/stm32g483ce" ];
          "stm32g483me" = [ "stm32-metapac/stm32g483me" ];
          "stm32g483pe" = [ "stm32-metapac/stm32g483pe" ];
          "stm32g483qe" = [ "stm32-metapac/stm32g483qe" ];
          "stm32g483re" = [ "stm32-metapac/stm32g483re" ];
          "stm32g483ve" = [ "stm32-metapac/stm32g483ve" ];
          "stm32g484ce" = [ "stm32-metapac/stm32g484ce" ];
          "stm32g484me" = [ "stm32-metapac/stm32g484me" ];
          "stm32g484pe" = [ "stm32-metapac/stm32g484pe" ];
          "stm32g484qe" = [ "stm32-metapac/stm32g484qe" ];
          "stm32g484re" = [ "stm32-metapac/stm32g484re" ];
          "stm32g484ve" = [ "stm32-metapac/stm32g484ve" ];
          "stm32g491cc" = [ "stm32-metapac/stm32g491cc" ];
          "stm32g491ce" = [ "stm32-metapac/stm32g491ce" ];
          "stm32g491kc" = [ "stm32-metapac/stm32g491kc" ];
          "stm32g491ke" = [ "stm32-metapac/stm32g491ke" ];
          "stm32g491mc" = [ "stm32-metapac/stm32g491mc" ];
          "stm32g491me" = [ "stm32-metapac/stm32g491me" ];
          "stm32g491rc" = [ "stm32-metapac/stm32g491rc" ];
          "stm32g491re" = [ "stm32-metapac/stm32g491re" ];
          "stm32g491vc" = [ "stm32-metapac/stm32g491vc" ];
          "stm32g491ve" = [ "stm32-metapac/stm32g491ve" ];
          "stm32g4a1ce" = [ "stm32-metapac/stm32g4a1ce" ];
          "stm32g4a1ke" = [ "stm32-metapac/stm32g4a1ke" ];
          "stm32g4a1me" = [ "stm32-metapac/stm32g4a1me" ];
          "stm32g4a1re" = [ "stm32-metapac/stm32g4a1re" ];
          "stm32g4a1ve" = [ "stm32-metapac/stm32g4a1ve" ];
          "stm32h503cb" = [ "stm32-metapac/stm32h503cb" ];
          "stm32h503eb" = [ "stm32-metapac/stm32h503eb" ];
          "stm32h503kb" = [ "stm32-metapac/stm32h503kb" ];
          "stm32h503rb" = [ "stm32-metapac/stm32h503rb" ];
          "stm32h523cc" = [ "stm32-metapac/stm32h523cc" ];
          "stm32h523ce" = [ "stm32-metapac/stm32h523ce" ];
          "stm32h523he" = [ "stm32-metapac/stm32h523he" ];
          "stm32h523rc" = [ "stm32-metapac/stm32h523rc" ];
          "stm32h523re" = [ "stm32-metapac/stm32h523re" ];
          "stm32h523vc" = [ "stm32-metapac/stm32h523vc" ];
          "stm32h523ve" = [ "stm32-metapac/stm32h523ve" ];
          "stm32h523zc" = [ "stm32-metapac/stm32h523zc" ];
          "stm32h523ze" = [ "stm32-metapac/stm32h523ze" ];
          "stm32h533ce" = [ "stm32-metapac/stm32h533ce" ];
          "stm32h533he" = [ "stm32-metapac/stm32h533he" ];
          "stm32h533re" = [ "stm32-metapac/stm32h533re" ];
          "stm32h533ve" = [ "stm32-metapac/stm32h533ve" ];
          "stm32h533ze" = [ "stm32-metapac/stm32h533ze" ];
          "stm32h562ag" = [ "stm32-metapac/stm32h562ag" ];
          "stm32h562ai" = [ "stm32-metapac/stm32h562ai" ];
          "stm32h562ig" = [ "stm32-metapac/stm32h562ig" ];
          "stm32h562ii" = [ "stm32-metapac/stm32h562ii" ];
          "stm32h562rg" = [ "stm32-metapac/stm32h562rg" ];
          "stm32h562ri" = [ "stm32-metapac/stm32h562ri" ];
          "stm32h562vg" = [ "stm32-metapac/stm32h562vg" ];
          "stm32h562vi" = [ "stm32-metapac/stm32h562vi" ];
          "stm32h562zg" = [ "stm32-metapac/stm32h562zg" ];
          "stm32h562zi" = [ "stm32-metapac/stm32h562zi" ];
          "stm32h563ag" = [ "stm32-metapac/stm32h563ag" ];
          "stm32h563ai" = [ "stm32-metapac/stm32h563ai" ];
          "stm32h563ig" = [ "stm32-metapac/stm32h563ig" ];
          "stm32h563ii" = [ "stm32-metapac/stm32h563ii" ];
          "stm32h563mi" = [ "stm32-metapac/stm32h563mi" ];
          "stm32h563rg" = [ "stm32-metapac/stm32h563rg" ];
          "stm32h563ri" = [ "stm32-metapac/stm32h563ri" ];
          "stm32h563vg" = [ "stm32-metapac/stm32h563vg" ];
          "stm32h563vi" = [ "stm32-metapac/stm32h563vi" ];
          "stm32h563zg" = [ "stm32-metapac/stm32h563zg" ];
          "stm32h563zi" = [ "stm32-metapac/stm32h563zi" ];
          "stm32h573ai" = [ "stm32-metapac/stm32h573ai" ];
          "stm32h573ii" = [ "stm32-metapac/stm32h573ii" ];
          "stm32h573mi" = [ "stm32-metapac/stm32h573mi" ];
          "stm32h573ri" = [ "stm32-metapac/stm32h573ri" ];
          "stm32h573vi" = [ "stm32-metapac/stm32h573vi" ];
          "stm32h573zi" = [ "stm32-metapac/stm32h573zi" ];
          "stm32h723ve" = [ "stm32-metapac/stm32h723ve" ];
          "stm32h723vg" = [ "stm32-metapac/stm32h723vg" ];
          "stm32h723ze" = [ "stm32-metapac/stm32h723ze" ];
          "stm32h723zg" = [ "stm32-metapac/stm32h723zg" ];
          "stm32h725ae" = [ "stm32-metapac/stm32h725ae" ];
          "stm32h725ag" = [ "stm32-metapac/stm32h725ag" ];
          "stm32h725ie" = [ "stm32-metapac/stm32h725ie" ];
          "stm32h725ig" = [ "stm32-metapac/stm32h725ig" ];
          "stm32h725re" = [ "stm32-metapac/stm32h725re" ];
          "stm32h725rg" = [ "stm32-metapac/stm32h725rg" ];
          "stm32h725ve" = [ "stm32-metapac/stm32h725ve" ];
          "stm32h725vg" = [ "stm32-metapac/stm32h725vg" ];
          "stm32h725ze" = [ "stm32-metapac/stm32h725ze" ];
          "stm32h725zg" = [ "stm32-metapac/stm32h725zg" ];
          "stm32h730ab" = [ "stm32-metapac/stm32h730ab" ];
          "stm32h730ib" = [ "stm32-metapac/stm32h730ib" ];
          "stm32h730vb" = [ "stm32-metapac/stm32h730vb" ];
          "stm32h730zb" = [ "stm32-metapac/stm32h730zb" ];
          "stm32h733vg" = [ "stm32-metapac/stm32h733vg" ];
          "stm32h733zg" = [ "stm32-metapac/stm32h733zg" ];
          "stm32h735ag" = [ "stm32-metapac/stm32h735ag" ];
          "stm32h735ig" = [ "stm32-metapac/stm32h735ig" ];
          "stm32h735rg" = [ "stm32-metapac/stm32h735rg" ];
          "stm32h735vg" = [ "stm32-metapac/stm32h735vg" ];
          "stm32h735zg" = [ "stm32-metapac/stm32h735zg" ];
          "stm32h742ag" = [ "stm32-metapac/stm32h742ag" ];
          "stm32h742ai" = [ "stm32-metapac/stm32h742ai" ];
          "stm32h742bg" = [ "stm32-metapac/stm32h742bg" ];
          "stm32h742bi" = [ "stm32-metapac/stm32h742bi" ];
          "stm32h742ig" = [ "stm32-metapac/stm32h742ig" ];
          "stm32h742ii" = [ "stm32-metapac/stm32h742ii" ];
          "stm32h742vg" = [ "stm32-metapac/stm32h742vg" ];
          "stm32h742vi" = [ "stm32-metapac/stm32h742vi" ];
          "stm32h742xg" = [ "stm32-metapac/stm32h742xg" ];
          "stm32h742xi" = [ "stm32-metapac/stm32h742xi" ];
          "stm32h742zg" = [ "stm32-metapac/stm32h742zg" ];
          "stm32h742zi" = [ "stm32-metapac/stm32h742zi" ];
          "stm32h743ag" = [ "stm32-metapac/stm32h743ag" ];
          "stm32h743ai" = [ "stm32-metapac/stm32h743ai" ];
          "stm32h743bg" = [ "stm32-metapac/stm32h743bg" ];
          "stm32h743bi" = [ "stm32-metapac/stm32h743bi" ];
          "stm32h743ig" = [ "stm32-metapac/stm32h743ig" ];
          "stm32h743ii" = [ "stm32-metapac/stm32h743ii" ];
          "stm32h743vg" = [ "stm32-metapac/stm32h743vg" ];
          "stm32h743vi" = [ "stm32-metapac/stm32h743vi" ];
          "stm32h743xg" = [ "stm32-metapac/stm32h743xg" ];
          "stm32h743xi" = [ "stm32-metapac/stm32h743xi" ];
          "stm32h743zg" = [ "stm32-metapac/stm32h743zg" ];
          "stm32h743zi" = [ "stm32-metapac/stm32h743zi" ];
          "stm32h745bg-cm4" = [ "stm32-metapac/stm32h745bg-cm4" "_dual-core" "_core-cm4" ];
          "stm32h745bg-cm7" = [ "stm32-metapac/stm32h745bg-cm7" "_dual-core" "_core-cm7" ];
          "stm32h745bi-cm4" = [ "stm32-metapac/stm32h745bi-cm4" "_dual-core" "_core-cm4" ];
          "stm32h745bi-cm7" = [ "stm32-metapac/stm32h745bi-cm7" "_dual-core" "_core-cm7" ];
          "stm32h745ig-cm4" = [ "stm32-metapac/stm32h745ig-cm4" "_dual-core" "_core-cm4" ];
          "stm32h745ig-cm7" = [ "stm32-metapac/stm32h745ig-cm7" "_dual-core" "_core-cm7" ];
          "stm32h745ii-cm4" = [ "stm32-metapac/stm32h745ii-cm4" "_dual-core" "_core-cm4" ];
          "stm32h745ii-cm7" = [ "stm32-metapac/stm32h745ii-cm7" "_dual-core" "_core-cm7" ];
          "stm32h745xg-cm4" = [ "stm32-metapac/stm32h745xg-cm4" "_dual-core" "_core-cm4" ];
          "stm32h745xg-cm7" = [ "stm32-metapac/stm32h745xg-cm7" "_dual-core" "_core-cm7" ];
          "stm32h745xi-cm4" = [ "stm32-metapac/stm32h745xi-cm4" "_dual-core" "_core-cm4" ];
          "stm32h745xi-cm7" = [ "stm32-metapac/stm32h745xi-cm7" "_dual-core" "_core-cm7" ];
          "stm32h745zg-cm4" = [ "stm32-metapac/stm32h745zg-cm4" "_dual-core" "_core-cm4" ];
          "stm32h745zg-cm7" = [ "stm32-metapac/stm32h745zg-cm7" "_dual-core" "_core-cm7" ];
          "stm32h745zi-cm4" = [ "stm32-metapac/stm32h745zi-cm4" "_dual-core" "_core-cm4" ];
          "stm32h745zi-cm7" = [ "stm32-metapac/stm32h745zi-cm7" "_dual-core" "_core-cm7" ];
          "stm32h747ag-cm4" = [ "stm32-metapac/stm32h747ag-cm4" "_dual-core" "_core-cm4" ];
          "stm32h747ag-cm7" = [ "stm32-metapac/stm32h747ag-cm7" "_dual-core" "_core-cm7" ];
          "stm32h747ai-cm4" = [ "stm32-metapac/stm32h747ai-cm4" "_dual-core" "_core-cm4" ];
          "stm32h747ai-cm7" = [ "stm32-metapac/stm32h747ai-cm7" "_dual-core" "_core-cm7" ];
          "stm32h747bg-cm4" = [ "stm32-metapac/stm32h747bg-cm4" "_dual-core" "_core-cm4" ];
          "stm32h747bg-cm7" = [ "stm32-metapac/stm32h747bg-cm7" "_dual-core" "_core-cm7" ];
          "stm32h747bi-cm4" = [ "stm32-metapac/stm32h747bi-cm4" "_dual-core" "_core-cm4" ];
          "stm32h747bi-cm7" = [ "stm32-metapac/stm32h747bi-cm7" "_dual-core" "_core-cm7" ];
          "stm32h747ig-cm4" = [ "stm32-metapac/stm32h747ig-cm4" "_dual-core" "_core-cm4" ];
          "stm32h747ig-cm7" = [ "stm32-metapac/stm32h747ig-cm7" "_dual-core" "_core-cm7" ];
          "stm32h747ii-cm4" = [ "stm32-metapac/stm32h747ii-cm4" "_dual-core" "_core-cm4" ];
          "stm32h747ii-cm7" = [ "stm32-metapac/stm32h747ii-cm7" "_dual-core" "_core-cm7" ];
          "stm32h747xg-cm4" = [ "stm32-metapac/stm32h747xg-cm4" "_dual-core" "_core-cm4" ];
          "stm32h747xg-cm7" = [ "stm32-metapac/stm32h747xg-cm7" "_dual-core" "_core-cm7" ];
          "stm32h747xi-cm4" = [ "stm32-metapac/stm32h747xi-cm4" "_dual-core" "_core-cm4" ];
          "stm32h747xi-cm7" = [ "stm32-metapac/stm32h747xi-cm7" "_dual-core" "_core-cm7" ];
          "stm32h747zi-cm4" = [ "stm32-metapac/stm32h747zi-cm4" "_dual-core" "_core-cm4" ];
          "stm32h747zi-cm7" = [ "stm32-metapac/stm32h747zi-cm7" "_dual-core" "_core-cm7" ];
          "stm32h750ib" = [ "stm32-metapac/stm32h750ib" ];
          "stm32h750vb" = [ "stm32-metapac/stm32h750vb" ];
          "stm32h750xb" = [ "stm32-metapac/stm32h750xb" ];
          "stm32h750zb" = [ "stm32-metapac/stm32h750zb" ];
          "stm32h753ai" = [ "stm32-metapac/stm32h753ai" ];
          "stm32h753bi" = [ "stm32-metapac/stm32h753bi" ];
          "stm32h753ii" = [ "stm32-metapac/stm32h753ii" ];
          "stm32h753vi" = [ "stm32-metapac/stm32h753vi" ];
          "stm32h753xi" = [ "stm32-metapac/stm32h753xi" ];
          "stm32h753zi" = [ "stm32-metapac/stm32h753zi" ];
          "stm32h755bi-cm4" = [ "stm32-metapac/stm32h755bi-cm4" "_dual-core" "_core-cm4" ];
          "stm32h755bi-cm7" = [ "stm32-metapac/stm32h755bi-cm7" "_dual-core" "_core-cm7" ];
          "stm32h755ii-cm4" = [ "stm32-metapac/stm32h755ii-cm4" "_dual-core" "_core-cm4" ];
          "stm32h755ii-cm7" = [ "stm32-metapac/stm32h755ii-cm7" "_dual-core" "_core-cm7" ];
          "stm32h755xi-cm4" = [ "stm32-metapac/stm32h755xi-cm4" "_dual-core" "_core-cm4" ];
          "stm32h755xi-cm7" = [ "stm32-metapac/stm32h755xi-cm7" "_dual-core" "_core-cm7" ];
          "stm32h755zi-cm4" = [ "stm32-metapac/stm32h755zi-cm4" "_dual-core" "_core-cm4" ];
          "stm32h755zi-cm7" = [ "stm32-metapac/stm32h755zi-cm7" "_dual-core" "_core-cm7" ];
          "stm32h757ai-cm4" = [ "stm32-metapac/stm32h757ai-cm4" "_dual-core" "_core-cm4" ];
          "stm32h757ai-cm7" = [ "stm32-metapac/stm32h757ai-cm7" "_dual-core" "_core-cm7" ];
          "stm32h757bi-cm4" = [ "stm32-metapac/stm32h757bi-cm4" "_dual-core" "_core-cm4" ];
          "stm32h757bi-cm7" = [ "stm32-metapac/stm32h757bi-cm7" "_dual-core" "_core-cm7" ];
          "stm32h757ii-cm4" = [ "stm32-metapac/stm32h757ii-cm4" "_dual-core" "_core-cm4" ];
          "stm32h757ii-cm7" = [ "stm32-metapac/stm32h757ii-cm7" "_dual-core" "_core-cm7" ];
          "stm32h757xi-cm4" = [ "stm32-metapac/stm32h757xi-cm4" "_dual-core" "_core-cm4" ];
          "stm32h757xi-cm7" = [ "stm32-metapac/stm32h757xi-cm7" "_dual-core" "_core-cm7" ];
          "stm32h757zi-cm4" = [ "stm32-metapac/stm32h757zi-cm4" "_dual-core" "_core-cm4" ];
          "stm32h757zi-cm7" = [ "stm32-metapac/stm32h757zi-cm7" "_dual-core" "_core-cm7" ];
          "stm32h7a3ag" = [ "stm32-metapac/stm32h7a3ag" ];
          "stm32h7a3ai" = [ "stm32-metapac/stm32h7a3ai" ];
          "stm32h7a3ig" = [ "stm32-metapac/stm32h7a3ig" ];
          "stm32h7a3ii" = [ "stm32-metapac/stm32h7a3ii" ];
          "stm32h7a3lg" = [ "stm32-metapac/stm32h7a3lg" ];
          "stm32h7a3li" = [ "stm32-metapac/stm32h7a3li" ];
          "stm32h7a3ng" = [ "stm32-metapac/stm32h7a3ng" ];
          "stm32h7a3ni" = [ "stm32-metapac/stm32h7a3ni" ];
          "stm32h7a3qi" = [ "stm32-metapac/stm32h7a3qi" ];
          "stm32h7a3rg" = [ "stm32-metapac/stm32h7a3rg" ];
          "stm32h7a3ri" = [ "stm32-metapac/stm32h7a3ri" ];
          "stm32h7a3vg" = [ "stm32-metapac/stm32h7a3vg" ];
          "stm32h7a3vi" = [ "stm32-metapac/stm32h7a3vi" ];
          "stm32h7a3zg" = [ "stm32-metapac/stm32h7a3zg" ];
          "stm32h7a3zi" = [ "stm32-metapac/stm32h7a3zi" ];
          "stm32h7b0ab" = [ "stm32-metapac/stm32h7b0ab" ];
          "stm32h7b0ib" = [ "stm32-metapac/stm32h7b0ib" ];
          "stm32h7b0rb" = [ "stm32-metapac/stm32h7b0rb" ];
          "stm32h7b0vb" = [ "stm32-metapac/stm32h7b0vb" ];
          "stm32h7b0zb" = [ "stm32-metapac/stm32h7b0zb" ];
          "stm32h7b3ai" = [ "stm32-metapac/stm32h7b3ai" ];
          "stm32h7b3ii" = [ "stm32-metapac/stm32h7b3ii" ];
          "stm32h7b3li" = [ "stm32-metapac/stm32h7b3li" ];
          "stm32h7b3ni" = [ "stm32-metapac/stm32h7b3ni" ];
          "stm32h7b3qi" = [ "stm32-metapac/stm32h7b3qi" ];
          "stm32h7b3ri" = [ "stm32-metapac/stm32h7b3ri" ];
          "stm32h7b3vi" = [ "stm32-metapac/stm32h7b3vi" ];
          "stm32h7b3zi" = [ "stm32-metapac/stm32h7b3zi" ];
          "stm32h7r3a8" = [ "stm32-metapac/stm32h7r3a8" ];
          "stm32h7r3i8" = [ "stm32-metapac/stm32h7r3i8" ];
          "stm32h7r3l8" = [ "stm32-metapac/stm32h7r3l8" ];
          "stm32h7r3r8" = [ "stm32-metapac/stm32h7r3r8" ];
          "stm32h7r3v8" = [ "stm32-metapac/stm32h7r3v8" ];
          "stm32h7r3z8" = [ "stm32-metapac/stm32h7r3z8" ];
          "stm32h7r7a8" = [ "stm32-metapac/stm32h7r7a8" ];
          "stm32h7r7i8" = [ "stm32-metapac/stm32h7r7i8" ];
          "stm32h7r7l8" = [ "stm32-metapac/stm32h7r7l8" ];
          "stm32h7r7z8" = [ "stm32-metapac/stm32h7r7z8" ];
          "stm32h7s3a8" = [ "stm32-metapac/stm32h7s3a8" ];
          "stm32h7s3i8" = [ "stm32-metapac/stm32h7s3i8" ];
          "stm32h7s3l8" = [ "stm32-metapac/stm32h7s3l8" ];
          "stm32h7s3r8" = [ "stm32-metapac/stm32h7s3r8" ];
          "stm32h7s3v8" = [ "stm32-metapac/stm32h7s3v8" ];
          "stm32h7s3z8" = [ "stm32-metapac/stm32h7s3z8" ];
          "stm32h7s7a8" = [ "stm32-metapac/stm32h7s7a8" ];
          "stm32h7s7i8" = [ "stm32-metapac/stm32h7s7i8" ];
          "stm32h7s7l8" = [ "stm32-metapac/stm32h7s7l8" ];
          "stm32h7s7z8" = [ "stm32-metapac/stm32h7s7z8" ];
          "stm32l010c6" = [ "stm32-metapac/stm32l010c6" ];
          "stm32l010f4" = [ "stm32-metapac/stm32l010f4" ];
          "stm32l010k4" = [ "stm32-metapac/stm32l010k4" ];
          "stm32l010k8" = [ "stm32-metapac/stm32l010k8" ];
          "stm32l010r8" = [ "stm32-metapac/stm32l010r8" ];
          "stm32l010rb" = [ "stm32-metapac/stm32l010rb" ];
          "stm32l011d3" = [ "stm32-metapac/stm32l011d3" ];
          "stm32l011d4" = [ "stm32-metapac/stm32l011d4" ];
          "stm32l011e3" = [ "stm32-metapac/stm32l011e3" ];
          "stm32l011e4" = [ "stm32-metapac/stm32l011e4" ];
          "stm32l011f3" = [ "stm32-metapac/stm32l011f3" ];
          "stm32l011f4" = [ "stm32-metapac/stm32l011f4" ];
          "stm32l011g3" = [ "stm32-metapac/stm32l011g3" ];
          "stm32l011g4" = [ "stm32-metapac/stm32l011g4" ];
          "stm32l011k3" = [ "stm32-metapac/stm32l011k3" ];
          "stm32l011k4" = [ "stm32-metapac/stm32l011k4" ];
          "stm32l021d4" = [ "stm32-metapac/stm32l021d4" ];
          "stm32l021f4" = [ "stm32-metapac/stm32l021f4" ];
          "stm32l021g4" = [ "stm32-metapac/stm32l021g4" ];
          "stm32l021k4" = [ "stm32-metapac/stm32l021k4" ];
          "stm32l031c4" = [ "stm32-metapac/stm32l031c4" ];
          "stm32l031c6" = [ "stm32-metapac/stm32l031c6" ];
          "stm32l031e4" = [ "stm32-metapac/stm32l031e4" ];
          "stm32l031e6" = [ "stm32-metapac/stm32l031e6" ];
          "stm32l031f4" = [ "stm32-metapac/stm32l031f4" ];
          "stm32l031f6" = [ "stm32-metapac/stm32l031f6" ];
          "stm32l031g4" = [ "stm32-metapac/stm32l031g4" ];
          "stm32l031g6" = [ "stm32-metapac/stm32l031g6" ];
          "stm32l031k4" = [ "stm32-metapac/stm32l031k4" ];
          "stm32l031k6" = [ "stm32-metapac/stm32l031k6" ];
          "stm32l041c4" = [ "stm32-metapac/stm32l041c4" ];
          "stm32l041c6" = [ "stm32-metapac/stm32l041c6" ];
          "stm32l041e6" = [ "stm32-metapac/stm32l041e6" ];
          "stm32l041f6" = [ "stm32-metapac/stm32l041f6" ];
          "stm32l041g6" = [ "stm32-metapac/stm32l041g6" ];
          "stm32l041k6" = [ "stm32-metapac/stm32l041k6" ];
          "stm32l051c6" = [ "stm32-metapac/stm32l051c6" ];
          "stm32l051c8" = [ "stm32-metapac/stm32l051c8" ];
          "stm32l051k6" = [ "stm32-metapac/stm32l051k6" ];
          "stm32l051k8" = [ "stm32-metapac/stm32l051k8" ];
          "stm32l051r6" = [ "stm32-metapac/stm32l051r6" ];
          "stm32l051r8" = [ "stm32-metapac/stm32l051r8" ];
          "stm32l051t6" = [ "stm32-metapac/stm32l051t6" ];
          "stm32l051t8" = [ "stm32-metapac/stm32l051t8" ];
          "stm32l052c6" = [ "stm32-metapac/stm32l052c6" ];
          "stm32l052c8" = [ "stm32-metapac/stm32l052c8" ];
          "stm32l052k6" = [ "stm32-metapac/stm32l052k6" ];
          "stm32l052k8" = [ "stm32-metapac/stm32l052k8" ];
          "stm32l052r6" = [ "stm32-metapac/stm32l052r6" ];
          "stm32l052r8" = [ "stm32-metapac/stm32l052r8" ];
          "stm32l052t6" = [ "stm32-metapac/stm32l052t6" ];
          "stm32l052t8" = [ "stm32-metapac/stm32l052t8" ];
          "stm32l053c6" = [ "stm32-metapac/stm32l053c6" ];
          "stm32l053c8" = [ "stm32-metapac/stm32l053c8" ];
          "stm32l053r6" = [ "stm32-metapac/stm32l053r6" ];
          "stm32l053r8" = [ "stm32-metapac/stm32l053r8" ];
          "stm32l062c8" = [ "stm32-metapac/stm32l062c8" ];
          "stm32l062k8" = [ "stm32-metapac/stm32l062k8" ];
          "stm32l063c8" = [ "stm32-metapac/stm32l063c8" ];
          "stm32l063r8" = [ "stm32-metapac/stm32l063r8" ];
          "stm32l071c8" = [ "stm32-metapac/stm32l071c8" ];
          "stm32l071cb" = [ "stm32-metapac/stm32l071cb" ];
          "stm32l071cz" = [ "stm32-metapac/stm32l071cz" ];
          "stm32l071k8" = [ "stm32-metapac/stm32l071k8" ];
          "stm32l071kb" = [ "stm32-metapac/stm32l071kb" ];
          "stm32l071kz" = [ "stm32-metapac/stm32l071kz" ];
          "stm32l071rb" = [ "stm32-metapac/stm32l071rb" ];
          "stm32l071rz" = [ "stm32-metapac/stm32l071rz" ];
          "stm32l071v8" = [ "stm32-metapac/stm32l071v8" ];
          "stm32l071vb" = [ "stm32-metapac/stm32l071vb" ];
          "stm32l071vz" = [ "stm32-metapac/stm32l071vz" ];
          "stm32l072cb" = [ "stm32-metapac/stm32l072cb" ];
          "stm32l072cz" = [ "stm32-metapac/stm32l072cz" ];
          "stm32l072kb" = [ "stm32-metapac/stm32l072kb" ];
          "stm32l072kz" = [ "stm32-metapac/stm32l072kz" ];
          "stm32l072rb" = [ "stm32-metapac/stm32l072rb" ];
          "stm32l072rz" = [ "stm32-metapac/stm32l072rz" ];
          "stm32l072v8" = [ "stm32-metapac/stm32l072v8" ];
          "stm32l072vb" = [ "stm32-metapac/stm32l072vb" ];
          "stm32l072vz" = [ "stm32-metapac/stm32l072vz" ];
          "stm32l073cb" = [ "stm32-metapac/stm32l073cb" ];
          "stm32l073cz" = [ "stm32-metapac/stm32l073cz" ];
          "stm32l073rb" = [ "stm32-metapac/stm32l073rb" ];
          "stm32l073rz" = [ "stm32-metapac/stm32l073rz" ];
          "stm32l073v8" = [ "stm32-metapac/stm32l073v8" ];
          "stm32l073vb" = [ "stm32-metapac/stm32l073vb" ];
          "stm32l073vz" = [ "stm32-metapac/stm32l073vz" ];
          "stm32l081cb" = [ "stm32-metapac/stm32l081cb" ];
          "stm32l081cz" = [ "stm32-metapac/stm32l081cz" ];
          "stm32l081kz" = [ "stm32-metapac/stm32l081kz" ];
          "stm32l082cz" = [ "stm32-metapac/stm32l082cz" ];
          "stm32l082kb" = [ "stm32-metapac/stm32l082kb" ];
          "stm32l082kz" = [ "stm32-metapac/stm32l082kz" ];
          "stm32l083cb" = [ "stm32-metapac/stm32l083cb" ];
          "stm32l083cz" = [ "stm32-metapac/stm32l083cz" ];
          "stm32l083rb" = [ "stm32-metapac/stm32l083rb" ];
          "stm32l083rz" = [ "stm32-metapac/stm32l083rz" ];
          "stm32l083v8" = [ "stm32-metapac/stm32l083v8" ];
          "stm32l083vb" = [ "stm32-metapac/stm32l083vb" ];
          "stm32l083vz" = [ "stm32-metapac/stm32l083vz" ];
          "stm32l100c6" = [ "stm32-metapac/stm32l100c6" ];
          "stm32l100c6-a" = [ "stm32-metapac/stm32l100c6-a" ];
          "stm32l100r8" = [ "stm32-metapac/stm32l100r8" ];
          "stm32l100r8-a" = [ "stm32-metapac/stm32l100r8-a" ];
          "stm32l100rb" = [ "stm32-metapac/stm32l100rb" ];
          "stm32l100rb-a" = [ "stm32-metapac/stm32l100rb-a" ];
          "stm32l100rc" = [ "stm32-metapac/stm32l100rc" ];
          "stm32l151c6" = [ "stm32-metapac/stm32l151c6" ];
          "stm32l151c6-a" = [ "stm32-metapac/stm32l151c6-a" ];
          "stm32l151c8" = [ "stm32-metapac/stm32l151c8" ];
          "stm32l151c8-a" = [ "stm32-metapac/stm32l151c8-a" ];
          "stm32l151cb" = [ "stm32-metapac/stm32l151cb" ];
          "stm32l151cb-a" = [ "stm32-metapac/stm32l151cb-a" ];
          "stm32l151cc" = [ "stm32-metapac/stm32l151cc" ];
          "stm32l151qc" = [ "stm32-metapac/stm32l151qc" ];
          "stm32l151qd" = [ "stm32-metapac/stm32l151qd" ];
          "stm32l151qe" = [ "stm32-metapac/stm32l151qe" ];
          "stm32l151r6" = [ "stm32-metapac/stm32l151r6" ];
          "stm32l151r6-a" = [ "stm32-metapac/stm32l151r6-a" ];
          "stm32l151r8" = [ "stm32-metapac/stm32l151r8" ];
          "stm32l151r8-a" = [ "stm32-metapac/stm32l151r8-a" ];
          "stm32l151rb" = [ "stm32-metapac/stm32l151rb" ];
          "stm32l151rb-a" = [ "stm32-metapac/stm32l151rb-a" ];
          "stm32l151rc" = [ "stm32-metapac/stm32l151rc" ];
          "stm32l151rc-a" = [ "stm32-metapac/stm32l151rc-a" ];
          "stm32l151rd" = [ "stm32-metapac/stm32l151rd" ];
          "stm32l151re" = [ "stm32-metapac/stm32l151re" ];
          "stm32l151uc" = [ "stm32-metapac/stm32l151uc" ];
          "stm32l151v8" = [ "stm32-metapac/stm32l151v8" ];
          "stm32l151v8-a" = [ "stm32-metapac/stm32l151v8-a" ];
          "stm32l151vb" = [ "stm32-metapac/stm32l151vb" ];
          "stm32l151vb-a" = [ "stm32-metapac/stm32l151vb-a" ];
          "stm32l151vc" = [ "stm32-metapac/stm32l151vc" ];
          "stm32l151vc-a" = [ "stm32-metapac/stm32l151vc-a" ];
          "stm32l151vd" = [ "stm32-metapac/stm32l151vd" ];
          "stm32l151vd-x" = [ "stm32-metapac/stm32l151vd-x" ];
          "stm32l151ve" = [ "stm32-metapac/stm32l151ve" ];
          "stm32l151zc" = [ "stm32-metapac/stm32l151zc" ];
          "stm32l151zd" = [ "stm32-metapac/stm32l151zd" ];
          "stm32l151ze" = [ "stm32-metapac/stm32l151ze" ];
          "stm32l152c6" = [ "stm32-metapac/stm32l152c6" ];
          "stm32l152c6-a" = [ "stm32-metapac/stm32l152c6-a" ];
          "stm32l152c8" = [ "stm32-metapac/stm32l152c8" ];
          "stm32l152c8-a" = [ "stm32-metapac/stm32l152c8-a" ];
          "stm32l152cb" = [ "stm32-metapac/stm32l152cb" ];
          "stm32l152cb-a" = [ "stm32-metapac/stm32l152cb-a" ];
          "stm32l152cc" = [ "stm32-metapac/stm32l152cc" ];
          "stm32l152qc" = [ "stm32-metapac/stm32l152qc" ];
          "stm32l152qd" = [ "stm32-metapac/stm32l152qd" ];
          "stm32l152qe" = [ "stm32-metapac/stm32l152qe" ];
          "stm32l152r6" = [ "stm32-metapac/stm32l152r6" ];
          "stm32l152r6-a" = [ "stm32-metapac/stm32l152r6-a" ];
          "stm32l152r8" = [ "stm32-metapac/stm32l152r8" ];
          "stm32l152r8-a" = [ "stm32-metapac/stm32l152r8-a" ];
          "stm32l152rb" = [ "stm32-metapac/stm32l152rb" ];
          "stm32l152rb-a" = [ "stm32-metapac/stm32l152rb-a" ];
          "stm32l152rc" = [ "stm32-metapac/stm32l152rc" ];
          "stm32l152rc-a" = [ "stm32-metapac/stm32l152rc-a" ];
          "stm32l152rd" = [ "stm32-metapac/stm32l152rd" ];
          "stm32l152re" = [ "stm32-metapac/stm32l152re" ];
          "stm32l152uc" = [ "stm32-metapac/stm32l152uc" ];
          "stm32l152v8" = [ "stm32-metapac/stm32l152v8" ];
          "stm32l152v8-a" = [ "stm32-metapac/stm32l152v8-a" ];
          "stm32l152vb" = [ "stm32-metapac/stm32l152vb" ];
          "stm32l152vb-a" = [ "stm32-metapac/stm32l152vb-a" ];
          "stm32l152vc" = [ "stm32-metapac/stm32l152vc" ];
          "stm32l152vc-a" = [ "stm32-metapac/stm32l152vc-a" ];
          "stm32l152vd" = [ "stm32-metapac/stm32l152vd" ];
          "stm32l152vd-x" = [ "stm32-metapac/stm32l152vd-x" ];
          "stm32l152ve" = [ "stm32-metapac/stm32l152ve" ];
          "stm32l152zc" = [ "stm32-metapac/stm32l152zc" ];
          "stm32l152zd" = [ "stm32-metapac/stm32l152zd" ];
          "stm32l152ze" = [ "stm32-metapac/stm32l152ze" ];
          "stm32l162qc" = [ "stm32-metapac/stm32l162qc" ];
          "stm32l162qd" = [ "stm32-metapac/stm32l162qd" ];
          "stm32l162rc" = [ "stm32-metapac/stm32l162rc" ];
          "stm32l162rc-a" = [ "stm32-metapac/stm32l162rc-a" ];
          "stm32l162rd" = [ "stm32-metapac/stm32l162rd" ];
          "stm32l162re" = [ "stm32-metapac/stm32l162re" ];
          "stm32l162vc" = [ "stm32-metapac/stm32l162vc" ];
          "stm32l162vc-a" = [ "stm32-metapac/stm32l162vc-a" ];
          "stm32l162vd" = [ "stm32-metapac/stm32l162vd" ];
          "stm32l162vd-x" = [ "stm32-metapac/stm32l162vd-x" ];
          "stm32l162ve" = [ "stm32-metapac/stm32l162ve" ];
          "stm32l162zc" = [ "stm32-metapac/stm32l162zc" ];
          "stm32l162zd" = [ "stm32-metapac/stm32l162zd" ];
          "stm32l162ze" = [ "stm32-metapac/stm32l162ze" ];
          "stm32l412c8" = [ "stm32-metapac/stm32l412c8" ];
          "stm32l412cb" = [ "stm32-metapac/stm32l412cb" ];
          "stm32l412k8" = [ "stm32-metapac/stm32l412k8" ];
          "stm32l412kb" = [ "stm32-metapac/stm32l412kb" ];
          "stm32l412r8" = [ "stm32-metapac/stm32l412r8" ];
          "stm32l412rb" = [ "stm32-metapac/stm32l412rb" ];
          "stm32l412t8" = [ "stm32-metapac/stm32l412t8" ];
          "stm32l412tb" = [ "stm32-metapac/stm32l412tb" ];
          "stm32l422cb" = [ "stm32-metapac/stm32l422cb" ];
          "stm32l422kb" = [ "stm32-metapac/stm32l422kb" ];
          "stm32l422rb" = [ "stm32-metapac/stm32l422rb" ];
          "stm32l422tb" = [ "stm32-metapac/stm32l422tb" ];
          "stm32l431cb" = [ "stm32-metapac/stm32l431cb" ];
          "stm32l431cc" = [ "stm32-metapac/stm32l431cc" ];
          "stm32l431kb" = [ "stm32-metapac/stm32l431kb" ];
          "stm32l431kc" = [ "stm32-metapac/stm32l431kc" ];
          "stm32l431rb" = [ "stm32-metapac/stm32l431rb" ];
          "stm32l431rc" = [ "stm32-metapac/stm32l431rc" ];
          "stm32l431vc" = [ "stm32-metapac/stm32l431vc" ];
          "stm32l432kb" = [ "stm32-metapac/stm32l432kb" ];
          "stm32l432kc" = [ "stm32-metapac/stm32l432kc" ];
          "stm32l433cb" = [ "stm32-metapac/stm32l433cb" ];
          "stm32l433cc" = [ "stm32-metapac/stm32l433cc" ];
          "stm32l433rb" = [ "stm32-metapac/stm32l433rb" ];
          "stm32l433rc" = [ "stm32-metapac/stm32l433rc" ];
          "stm32l433vc" = [ "stm32-metapac/stm32l433vc" ];
          "stm32l442kc" = [ "stm32-metapac/stm32l442kc" ];
          "stm32l443cc" = [ "stm32-metapac/stm32l443cc" ];
          "stm32l443rc" = [ "stm32-metapac/stm32l443rc" ];
          "stm32l443vc" = [ "stm32-metapac/stm32l443vc" ];
          "stm32l451cc" = [ "stm32-metapac/stm32l451cc" ];
          "stm32l451ce" = [ "stm32-metapac/stm32l451ce" ];
          "stm32l451rc" = [ "stm32-metapac/stm32l451rc" ];
          "stm32l451re" = [ "stm32-metapac/stm32l451re" ];
          "stm32l451vc" = [ "stm32-metapac/stm32l451vc" ];
          "stm32l451ve" = [ "stm32-metapac/stm32l451ve" ];
          "stm32l452cc" = [ "stm32-metapac/stm32l452cc" ];
          "stm32l452ce" = [ "stm32-metapac/stm32l452ce" ];
          "stm32l452rc" = [ "stm32-metapac/stm32l452rc" ];
          "stm32l452re" = [ "stm32-metapac/stm32l452re" ];
          "stm32l452vc" = [ "stm32-metapac/stm32l452vc" ];
          "stm32l452ve" = [ "stm32-metapac/stm32l452ve" ];
          "stm32l462ce" = [ "stm32-metapac/stm32l462ce" ];
          "stm32l462re" = [ "stm32-metapac/stm32l462re" ];
          "stm32l462ve" = [ "stm32-metapac/stm32l462ve" ];
          "stm32l471qe" = [ "stm32-metapac/stm32l471qe" ];
          "stm32l471qg" = [ "stm32-metapac/stm32l471qg" ];
          "stm32l471re" = [ "stm32-metapac/stm32l471re" ];
          "stm32l471rg" = [ "stm32-metapac/stm32l471rg" ];
          "stm32l471ve" = [ "stm32-metapac/stm32l471ve" ];
          "stm32l471vg" = [ "stm32-metapac/stm32l471vg" ];
          "stm32l471ze" = [ "stm32-metapac/stm32l471ze" ];
          "stm32l471zg" = [ "stm32-metapac/stm32l471zg" ];
          "stm32l475rc" = [ "stm32-metapac/stm32l475rc" ];
          "stm32l475re" = [ "stm32-metapac/stm32l475re" ];
          "stm32l475rg" = [ "stm32-metapac/stm32l475rg" ];
          "stm32l475vc" = [ "stm32-metapac/stm32l475vc" ];
          "stm32l475ve" = [ "stm32-metapac/stm32l475ve" ];
          "stm32l475vg" = [ "stm32-metapac/stm32l475vg" ];
          "stm32l476je" = [ "stm32-metapac/stm32l476je" ];
          "stm32l476jg" = [ "stm32-metapac/stm32l476jg" ];
          "stm32l476me" = [ "stm32-metapac/stm32l476me" ];
          "stm32l476mg" = [ "stm32-metapac/stm32l476mg" ];
          "stm32l476qe" = [ "stm32-metapac/stm32l476qe" ];
          "stm32l476qg" = [ "stm32-metapac/stm32l476qg" ];
          "stm32l476rc" = [ "stm32-metapac/stm32l476rc" ];
          "stm32l476re" = [ "stm32-metapac/stm32l476re" ];
          "stm32l476rg" = [ "stm32-metapac/stm32l476rg" ];
          "stm32l476vc" = [ "stm32-metapac/stm32l476vc" ];
          "stm32l476ve" = [ "stm32-metapac/stm32l476ve" ];
          "stm32l476vg" = [ "stm32-metapac/stm32l476vg" ];
          "stm32l476ze" = [ "stm32-metapac/stm32l476ze" ];
          "stm32l476zg" = [ "stm32-metapac/stm32l476zg" ];
          "stm32l486jg" = [ "stm32-metapac/stm32l486jg" ];
          "stm32l486qg" = [ "stm32-metapac/stm32l486qg" ];
          "stm32l486rg" = [ "stm32-metapac/stm32l486rg" ];
          "stm32l486vg" = [ "stm32-metapac/stm32l486vg" ];
          "stm32l486zg" = [ "stm32-metapac/stm32l486zg" ];
          "stm32l496ae" = [ "stm32-metapac/stm32l496ae" ];
          "stm32l496ag" = [ "stm32-metapac/stm32l496ag" ];
          "stm32l496qe" = [ "stm32-metapac/stm32l496qe" ];
          "stm32l496qg" = [ "stm32-metapac/stm32l496qg" ];
          "stm32l496re" = [ "stm32-metapac/stm32l496re" ];
          "stm32l496rg" = [ "stm32-metapac/stm32l496rg" ];
          "stm32l496ve" = [ "stm32-metapac/stm32l496ve" ];
          "stm32l496vg" = [ "stm32-metapac/stm32l496vg" ];
          "stm32l496wg" = [ "stm32-metapac/stm32l496wg" ];
          "stm32l496ze" = [ "stm32-metapac/stm32l496ze" ];
          "stm32l496zg" = [ "stm32-metapac/stm32l496zg" ];
          "stm32l4a6ag" = [ "stm32-metapac/stm32l4a6ag" ];
          "stm32l4a6qg" = [ "stm32-metapac/stm32l4a6qg" ];
          "stm32l4a6rg" = [ "stm32-metapac/stm32l4a6rg" ];
          "stm32l4a6vg" = [ "stm32-metapac/stm32l4a6vg" ];
          "stm32l4a6zg" = [ "stm32-metapac/stm32l4a6zg" ];
          "stm32l4p5ae" = [ "stm32-metapac/stm32l4p5ae" ];
          "stm32l4p5ag" = [ "stm32-metapac/stm32l4p5ag" ];
          "stm32l4p5ce" = [ "stm32-metapac/stm32l4p5ce" ];
          "stm32l4p5cg" = [ "stm32-metapac/stm32l4p5cg" ];
          "stm32l4p5qe" = [ "stm32-metapac/stm32l4p5qe" ];
          "stm32l4p5qg" = [ "stm32-metapac/stm32l4p5qg" ];
          "stm32l4p5re" = [ "stm32-metapac/stm32l4p5re" ];
          "stm32l4p5rg" = [ "stm32-metapac/stm32l4p5rg" ];
          "stm32l4p5ve" = [ "stm32-metapac/stm32l4p5ve" ];
          "stm32l4p5vg" = [ "stm32-metapac/stm32l4p5vg" ];
          "stm32l4p5ze" = [ "stm32-metapac/stm32l4p5ze" ];
          "stm32l4p5zg" = [ "stm32-metapac/stm32l4p5zg" ];
          "stm32l4q5ag" = [ "stm32-metapac/stm32l4q5ag" ];
          "stm32l4q5cg" = [ "stm32-metapac/stm32l4q5cg" ];
          "stm32l4q5qg" = [ "stm32-metapac/stm32l4q5qg" ];
          "stm32l4q5rg" = [ "stm32-metapac/stm32l4q5rg" ];
          "stm32l4q5vg" = [ "stm32-metapac/stm32l4q5vg" ];
          "stm32l4q5zg" = [ "stm32-metapac/stm32l4q5zg" ];
          "stm32l4r5ag" = [ "stm32-metapac/stm32l4r5ag" ];
          "stm32l4r5ai" = [ "stm32-metapac/stm32l4r5ai" ];
          "stm32l4r5qg" = [ "stm32-metapac/stm32l4r5qg" ];
          "stm32l4r5qi" = [ "stm32-metapac/stm32l4r5qi" ];
          "stm32l4r5vg" = [ "stm32-metapac/stm32l4r5vg" ];
          "stm32l4r5vi" = [ "stm32-metapac/stm32l4r5vi" ];
          "stm32l4r5zg" = [ "stm32-metapac/stm32l4r5zg" ];
          "stm32l4r5zi" = [ "stm32-metapac/stm32l4r5zi" ];
          "stm32l4r7ai" = [ "stm32-metapac/stm32l4r7ai" ];
          "stm32l4r7vi" = [ "stm32-metapac/stm32l4r7vi" ];
          "stm32l4r7zi" = [ "stm32-metapac/stm32l4r7zi" ];
          "stm32l4r9ag" = [ "stm32-metapac/stm32l4r9ag" ];
          "stm32l4r9ai" = [ "stm32-metapac/stm32l4r9ai" ];
          "stm32l4r9vg" = [ "stm32-metapac/stm32l4r9vg" ];
          "stm32l4r9vi" = [ "stm32-metapac/stm32l4r9vi" ];
          "stm32l4r9zg" = [ "stm32-metapac/stm32l4r9zg" ];
          "stm32l4r9zi" = [ "stm32-metapac/stm32l4r9zi" ];
          "stm32l4s5ai" = [ "stm32-metapac/stm32l4s5ai" ];
          "stm32l4s5qi" = [ "stm32-metapac/stm32l4s5qi" ];
          "stm32l4s5vi" = [ "stm32-metapac/stm32l4s5vi" ];
          "stm32l4s5zi" = [ "stm32-metapac/stm32l4s5zi" ];
          "stm32l4s7ai" = [ "stm32-metapac/stm32l4s7ai" ];
          "stm32l4s7vi" = [ "stm32-metapac/stm32l4s7vi" ];
          "stm32l4s7zi" = [ "stm32-metapac/stm32l4s7zi" ];
          "stm32l4s9ai" = [ "stm32-metapac/stm32l4s9ai" ];
          "stm32l4s9vi" = [ "stm32-metapac/stm32l4s9vi" ];
          "stm32l4s9zi" = [ "stm32-metapac/stm32l4s9zi" ];
          "stm32l552cc" = [ "stm32-metapac/stm32l552cc" ];
          "stm32l552ce" = [ "stm32-metapac/stm32l552ce" ];
          "stm32l552me" = [ "stm32-metapac/stm32l552me" ];
          "stm32l552qc" = [ "stm32-metapac/stm32l552qc" ];
          "stm32l552qe" = [ "stm32-metapac/stm32l552qe" ];
          "stm32l552rc" = [ "stm32-metapac/stm32l552rc" ];
          "stm32l552re" = [ "stm32-metapac/stm32l552re" ];
          "stm32l552vc" = [ "stm32-metapac/stm32l552vc" ];
          "stm32l552ve" = [ "stm32-metapac/stm32l552ve" ];
          "stm32l552zc" = [ "stm32-metapac/stm32l552zc" ];
          "stm32l552ze" = [ "stm32-metapac/stm32l552ze" ];
          "stm32l562ce" = [ "stm32-metapac/stm32l562ce" ];
          "stm32l562me" = [ "stm32-metapac/stm32l562me" ];
          "stm32l562qe" = [ "stm32-metapac/stm32l562qe" ];
          "stm32l562re" = [ "stm32-metapac/stm32l562re" ];
          "stm32l562ve" = [ "stm32-metapac/stm32l562ve" ];
          "stm32l562ze" = [ "stm32-metapac/stm32l562ze" ];
          "stm32u031c6" = [ "stm32-metapac/stm32u031c6" ];
          "stm32u031c8" = [ "stm32-metapac/stm32u031c8" ];
          "stm32u031f4" = [ "stm32-metapac/stm32u031f4" ];
          "stm32u031f6" = [ "stm32-metapac/stm32u031f6" ];
          "stm32u031f8" = [ "stm32-metapac/stm32u031f8" ];
          "stm32u031g6" = [ "stm32-metapac/stm32u031g6" ];
          "stm32u031g8" = [ "stm32-metapac/stm32u031g8" ];
          "stm32u031k4" = [ "stm32-metapac/stm32u031k4" ];
          "stm32u031k6" = [ "stm32-metapac/stm32u031k6" ];
          "stm32u031k8" = [ "stm32-metapac/stm32u031k8" ];
          "stm32u031r6" = [ "stm32-metapac/stm32u031r6" ];
          "stm32u031r8" = [ "stm32-metapac/stm32u031r8" ];
          "stm32u073c8" = [ "stm32-metapac/stm32u073c8" ];
          "stm32u073cb" = [ "stm32-metapac/stm32u073cb" ];
          "stm32u073cc" = [ "stm32-metapac/stm32u073cc" ];
          "stm32u073h8" = [ "stm32-metapac/stm32u073h8" ];
          "stm32u073hb" = [ "stm32-metapac/stm32u073hb" ];
          "stm32u073hc" = [ "stm32-metapac/stm32u073hc" ];
          "stm32u073k8" = [ "stm32-metapac/stm32u073k8" ];
          "stm32u073kb" = [ "stm32-metapac/stm32u073kb" ];
          "stm32u073kc" = [ "stm32-metapac/stm32u073kc" ];
          "stm32u073m8" = [ "stm32-metapac/stm32u073m8" ];
          "stm32u073mb" = [ "stm32-metapac/stm32u073mb" ];
          "stm32u073mc" = [ "stm32-metapac/stm32u073mc" ];
          "stm32u073r8" = [ "stm32-metapac/stm32u073r8" ];
          "stm32u073rb" = [ "stm32-metapac/stm32u073rb" ];
          "stm32u073rc" = [ "stm32-metapac/stm32u073rc" ];
          "stm32u083cc" = [ "stm32-metapac/stm32u083cc" ];
          "stm32u083hc" = [ "stm32-metapac/stm32u083hc" ];
          "stm32u083kc" = [ "stm32-metapac/stm32u083kc" ];
          "stm32u083mc" = [ "stm32-metapac/stm32u083mc" ];
          "stm32u083rc" = [ "stm32-metapac/stm32u083rc" ];
          "stm32u535cb" = [ "stm32-metapac/stm32u535cb" ];
          "stm32u535cc" = [ "stm32-metapac/stm32u535cc" ];
          "stm32u535ce" = [ "stm32-metapac/stm32u535ce" ];
          "stm32u535je" = [ "stm32-metapac/stm32u535je" ];
          "stm32u535nc" = [ "stm32-metapac/stm32u535nc" ];
          "stm32u535ne" = [ "stm32-metapac/stm32u535ne" ];
          "stm32u535rb" = [ "stm32-metapac/stm32u535rb" ];
          "stm32u535rc" = [ "stm32-metapac/stm32u535rc" ];
          "stm32u535re" = [ "stm32-metapac/stm32u535re" ];
          "stm32u535vc" = [ "stm32-metapac/stm32u535vc" ];
          "stm32u535ve" = [ "stm32-metapac/stm32u535ve" ];
          "stm32u545ce" = [ "stm32-metapac/stm32u545ce" ];
          "stm32u545je" = [ "stm32-metapac/stm32u545je" ];
          "stm32u545ne" = [ "stm32-metapac/stm32u545ne" ];
          "stm32u545re" = [ "stm32-metapac/stm32u545re" ];
          "stm32u545ve" = [ "stm32-metapac/stm32u545ve" ];
          "stm32u575ag" = [ "stm32-metapac/stm32u575ag" ];
          "stm32u575ai" = [ "stm32-metapac/stm32u575ai" ];
          "stm32u575cg" = [ "stm32-metapac/stm32u575cg" ];
          "stm32u575ci" = [ "stm32-metapac/stm32u575ci" ];
          "stm32u575og" = [ "stm32-metapac/stm32u575og" ];
          "stm32u575oi" = [ "stm32-metapac/stm32u575oi" ];
          "stm32u575qg" = [ "stm32-metapac/stm32u575qg" ];
          "stm32u575qi" = [ "stm32-metapac/stm32u575qi" ];
          "stm32u575rg" = [ "stm32-metapac/stm32u575rg" ];
          "stm32u575ri" = [ "stm32-metapac/stm32u575ri" ];
          "stm32u575vg" = [ "stm32-metapac/stm32u575vg" ];
          "stm32u575vi" = [ "stm32-metapac/stm32u575vi" ];
          "stm32u575zg" = [ "stm32-metapac/stm32u575zg" ];
          "stm32u575zi" = [ "stm32-metapac/stm32u575zi" ];
          "stm32u585ai" = [ "stm32-metapac/stm32u585ai" ];
          "stm32u585ci" = [ "stm32-metapac/stm32u585ci" ];
          "stm32u585oi" = [ "stm32-metapac/stm32u585oi" ];
          "stm32u585qi" = [ "stm32-metapac/stm32u585qi" ];
          "stm32u585ri" = [ "stm32-metapac/stm32u585ri" ];
          "stm32u585vi" = [ "stm32-metapac/stm32u585vi" ];
          "stm32u585zi" = [ "stm32-metapac/stm32u585zi" ];
          "stm32u595ai" = [ "stm32-metapac/stm32u595ai" ];
          "stm32u595aj" = [ "stm32-metapac/stm32u595aj" ];
          "stm32u595qi" = [ "stm32-metapac/stm32u595qi" ];
          "stm32u595qj" = [ "stm32-metapac/stm32u595qj" ];
          "stm32u595ri" = [ "stm32-metapac/stm32u595ri" ];
          "stm32u595rj" = [ "stm32-metapac/stm32u595rj" ];
          "stm32u595vi" = [ "stm32-metapac/stm32u595vi" ];
          "stm32u595vj" = [ "stm32-metapac/stm32u595vj" ];
          "stm32u595zi" = [ "stm32-metapac/stm32u595zi" ];
          "stm32u595zj" = [ "stm32-metapac/stm32u595zj" ];
          "stm32u599bj" = [ "stm32-metapac/stm32u599bj" ];
          "stm32u599ni" = [ "stm32-metapac/stm32u599ni" ];
          "stm32u599nj" = [ "stm32-metapac/stm32u599nj" ];
          "stm32u599vi" = [ "stm32-metapac/stm32u599vi" ];
          "stm32u599vj" = [ "stm32-metapac/stm32u599vj" ];
          "stm32u599zi" = [ "stm32-metapac/stm32u599zi" ];
          "stm32u599zj" = [ "stm32-metapac/stm32u599zj" ];
          "stm32u5a5aj" = [ "stm32-metapac/stm32u5a5aj" ];
          "stm32u5a5qi" = [ "stm32-metapac/stm32u5a5qi" ];
          "stm32u5a5qj" = [ "stm32-metapac/stm32u5a5qj" ];
          "stm32u5a5rj" = [ "stm32-metapac/stm32u5a5rj" ];
          "stm32u5a5vj" = [ "stm32-metapac/stm32u5a5vj" ];
          "stm32u5a5zj" = [ "stm32-metapac/stm32u5a5zj" ];
          "stm32u5a9bj" = [ "stm32-metapac/stm32u5a9bj" ];
          "stm32u5a9nj" = [ "stm32-metapac/stm32u5a9nj" ];
          "stm32u5a9vj" = [ "stm32-metapac/stm32u5a9vj" ];
          "stm32u5a9zj" = [ "stm32-metapac/stm32u5a9zj" ];
          "stm32u5f7vi" = [ "stm32-metapac/stm32u5f7vi" ];
          "stm32u5f7vj" = [ "stm32-metapac/stm32u5f7vj" ];
          "stm32u5f9bj" = [ "stm32-metapac/stm32u5f9bj" ];
          "stm32u5f9nj" = [ "stm32-metapac/stm32u5f9nj" ];
          "stm32u5f9vi" = [ "stm32-metapac/stm32u5f9vi" ];
          "stm32u5f9vj" = [ "stm32-metapac/stm32u5f9vj" ];
          "stm32u5f9zi" = [ "stm32-metapac/stm32u5f9zi" ];
          "stm32u5f9zj" = [ "stm32-metapac/stm32u5f9zj" ];
          "stm32u5g7vj" = [ "stm32-metapac/stm32u5g7vj" ];
          "stm32u5g9bj" = [ "stm32-metapac/stm32u5g9bj" ];
          "stm32u5g9nj" = [ "stm32-metapac/stm32u5g9nj" ];
          "stm32u5g9vj" = [ "stm32-metapac/stm32u5g9vj" ];
          "stm32u5g9zj" = [ "stm32-metapac/stm32u5g9zj" ];
          "stm32wb10cc" = [ "stm32-metapac/stm32wb10cc" ];
          "stm32wb15cc" = [ "stm32-metapac/stm32wb15cc" ];
          "stm32wb30ce" = [ "stm32-metapac/stm32wb30ce" ];
          "stm32wb35cc" = [ "stm32-metapac/stm32wb35cc" ];
          "stm32wb35ce" = [ "stm32-metapac/stm32wb35ce" ];
          "stm32wb50cg" = [ "stm32-metapac/stm32wb50cg" ];
          "stm32wb55cc" = [ "stm32-metapac/stm32wb55cc" ];
          "stm32wb55ce" = [ "stm32-metapac/stm32wb55ce" ];
          "stm32wb55cg" = [ "stm32-metapac/stm32wb55cg" ];
          "stm32wb55rc" = [ "stm32-metapac/stm32wb55rc" ];
          "stm32wb55re" = [ "stm32-metapac/stm32wb55re" ];
          "stm32wb55rg" = [ "stm32-metapac/stm32wb55rg" ];
          "stm32wb55vc" = [ "stm32-metapac/stm32wb55vc" ];
          "stm32wb55ve" = [ "stm32-metapac/stm32wb55ve" ];
          "stm32wb55vg" = [ "stm32-metapac/stm32wb55vg" ];
          "stm32wb55vy" = [ "stm32-metapac/stm32wb55vy" ];
          "stm32wba50ke" = [ "stm32-metapac/stm32wba50ke" ];
          "stm32wba50kg" = [ "stm32-metapac/stm32wba50kg" ];
          "stm32wba52ce" = [ "stm32-metapac/stm32wba52ce" ];
          "stm32wba52cg" = [ "stm32-metapac/stm32wba52cg" ];
          "stm32wba52ke" = [ "stm32-metapac/stm32wba52ke" ];
          "stm32wba52kg" = [ "stm32-metapac/stm32wba52kg" ];
          "stm32wba54ce" = [ "stm32-metapac/stm32wba54ce" ];
          "stm32wba54cg" = [ "stm32-metapac/stm32wba54cg" ];
          "stm32wba54ke" = [ "stm32-metapac/stm32wba54ke" ];
          "stm32wba54kg" = [ "stm32-metapac/stm32wba54kg" ];
          "stm32wba55ce" = [ "stm32-metapac/stm32wba55ce" ];
          "stm32wba55cg" = [ "stm32-metapac/stm32wba55cg" ];
          "stm32wba55he" = [ "stm32-metapac/stm32wba55he" ];
          "stm32wba55hg" = [ "stm32-metapac/stm32wba55hg" ];
          "stm32wba55ue" = [ "stm32-metapac/stm32wba55ue" ];
          "stm32wba55ug" = [ "stm32-metapac/stm32wba55ug" ];
          "stm32wl54cc-cm0p" = [ "stm32-metapac/stm32wl54cc-cm0p" "_dual-core" "_core-cm0p" ];
          "stm32wl54cc-cm4" = [ "stm32-metapac/stm32wl54cc-cm4" "_dual-core" "_core-cm4" ];
          "stm32wl54jc-cm0p" = [ "stm32-metapac/stm32wl54jc-cm0p" "_dual-core" "_core-cm0p" ];
          "stm32wl54jc-cm4" = [ "stm32-metapac/stm32wl54jc-cm4" "_dual-core" "_core-cm4" ];
          "stm32wl55cc-cm0p" = [ "stm32-metapac/stm32wl55cc-cm0p" "_dual-core" "_core-cm0p" ];
          "stm32wl55cc-cm4" = [ "stm32-metapac/stm32wl55cc-cm4" "_dual-core" "_core-cm4" ];
          "stm32wl55jc-cm0p" = [ "stm32-metapac/stm32wl55jc-cm0p" "_dual-core" "_core-cm0p" ];
          "stm32wl55jc-cm4" = [ "stm32-metapac/stm32wl55jc-cm4" "_dual-core" "_core-cm4" ];
          "stm32wle4c8" = [ "stm32-metapac/stm32wle4c8" ];
          "stm32wle4cb" = [ "stm32-metapac/stm32wle4cb" ];
          "stm32wle4cc" = [ "stm32-metapac/stm32wle4cc" ];
          "stm32wle4j8" = [ "stm32-metapac/stm32wle4j8" ];
          "stm32wle4jb" = [ "stm32-metapac/stm32wle4jb" ];
          "stm32wle4jc" = [ "stm32-metapac/stm32wle4jc" ];
          "stm32wle5c8" = [ "stm32-metapac/stm32wle5c8" ];
          "stm32wle5cb" = [ "stm32-metapac/stm32wle5cb" ];
          "stm32wle5cc" = [ "stm32-metapac/stm32wle5cc" ];
          "stm32wle5j8" = [ "stm32-metapac/stm32wle5j8" ];
          "stm32wle5jb" = [ "stm32-metapac/stm32wle5jb" ];
          "stm32wle5jc" = [ "stm32-metapac/stm32wle5jc" ];
          "time" = [ "dep:embassy-time" "embassy-embedded-hal/time" ];
          "time-driver-any" = [ "_time-driver" ];
          "time-driver-tim1" = [ "_time-driver" ];
          "time-driver-tim12" = [ "_time-driver" ];
          "time-driver-tim15" = [ "_time-driver" ];
          "time-driver-tim2" = [ "_time-driver" ];
          "time-driver-tim20" = [ "_time-driver" ];
          "time-driver-tim21" = [ "_time-driver" ];
          "time-driver-tim22" = [ "_time-driver" ];
          "time-driver-tim23" = [ "_time-driver" ];
          "time-driver-tim24" = [ "_time-driver" ];
          "time-driver-tim3" = [ "_time-driver" ];
          "time-driver-tim4" = [ "_time-driver" ];
          "time-driver-tim5" = [ "_time-driver" ];
          "time-driver-tim8" = [ "_time-driver" ];
          "time-driver-tim9" = [ "_time-driver" ];
        };
        resolvedDefaultFeatures = [ "_time-driver" "default" "defmt" "exti" "rt" "stm32f303vc" "time" "time-driver-tim2" "unstable-pac" ];
      };
      "embassy-sync 0.6.2" = rec {
        crateName = "embassy-sync";
        version = "0.6.2";
        edition = "2021";
        sha256 = "0ja0scip9sik39nissyajsi9f78b9fj9wj4702x52yjsy3gqqb4d";
        libName = "embassy_sync";
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "critical-section";
            packageId = "critical-section";
          }
          {
            name = "defmt";
            packageId = "defmt 0.3.100";
            optional = true;
          }
          {
            name = "embedded-io-async";
            packageId = "embedded-io-async";
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "heapless";
            packageId = "heapless";
          }
        ];
        devDependencies = [
          {
            name = "critical-section";
            packageId = "critical-section";
            features = [ "std" ];
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            features = [ "channel" "sink" ];
          }
        ];
        features = {
          "defmt" = [ "dep:defmt" ];
          "log" = [ "dep:log" ];
          "std" = [ "critical-section/std" ];
        };
        resolvedDefaultFeatures = [ "defmt" ];
      };
      "embassy-sync 0.7.0" = rec {
        crateName = "embassy-sync";
        version = "0.7.0";
        edition = "2021";
        sha256 = "0dmicrhgv4b20xsyqj8dhglng02xmhr5aag0dmjrnbw9xahsiwff";
        libName = "embassy_sync";
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "critical-section";
            packageId = "critical-section";
          }
          {
            name = "embedded-io-async";
            packageId = "embedded-io-async";
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "heapless";
            packageId = "heapless";
          }
        ];
        devDependencies = [
          {
            name = "critical-section";
            packageId = "critical-section";
            features = [ "std" ];
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            features = [ "channel" "sink" ];
          }
        ];
        features = {
          "defmt" = [ "dep:defmt" ];
          "log" = [ "dep:log" ];
        };
      };
      "embassy-time" = rec {
        crateName = "embassy-time";
        version = "0.4.0";
        edition = "2021";
        sha256 = "1y51sz70709m2srx89wz3b6ws466aksnc2ifsqx1inla35zia87q";
        libName = "embassy_time";
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "critical-section";
            packageId = "critical-section";
          }
          {
            name = "defmt";
            packageId = "defmt 0.3.100";
            optional = true;
          }
          {
            name = "document-features";
            packageId = "document-features";
          }
          {
            name = "embassy-time-driver";
            packageId = "embassy-time-driver";
          }
          {
            name = "embedded-hal";
            packageId = "embedded-hal 0.2.7";
            rename = "embedded-hal-02";
          }
          {
            name = "embedded-hal";
            packageId = "embedded-hal 1.0.0";
            rename = "embedded-hal-1";
          }
          {
            name = "embedded-hal-async";
            packageId = "embedded-hal-async";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "critical-section";
            packageId = "critical-section";
            features = [ "std" ];
          }
        ];
        features = {
          "defmt" = [ "dep:defmt" ];
          "defmt-timestamp-uptime" = [ "defmt" ];
          "defmt-timestamp-uptime-ms" = [ "defmt" ];
          "defmt-timestamp-uptime-s" = [ "defmt" ];
          "defmt-timestamp-uptime-tms" = [ "defmt" ];
          "defmt-timestamp-uptime-ts" = [ "defmt" ];
          "defmt-timestamp-uptime-tus" = [ "defmt" ];
          "defmt-timestamp-uptime-us" = [ "defmt" ];
          "generic-queue-128" = [ "embassy-time-queue-utils/generic-queue-128" ];
          "generic-queue-16" = [ "embassy-time-queue-utils/generic-queue-16" ];
          "generic-queue-32" = [ "embassy-time-queue-utils/generic-queue-32" ];
          "generic-queue-64" = [ "embassy-time-queue-utils/generic-queue-64" ];
          "generic-queue-8" = [ "embassy-time-queue-utils/generic-queue-8" ];
          "log" = [ "dep:log" ];
          "mock-driver" = [ "tick-hz-1_000_000" "dep:embassy-time-queue-utils" ];
          "std" = [ "tick-hz-1_000_000" "critical-section/std" "dep:embassy-time-queue-utils" ];
          "tick-hz-1" = [ "embassy-time-driver/tick-hz-1" ];
          "tick-hz-10" = [ "embassy-time-driver/tick-hz-10" ];
          "tick-hz-100" = [ "embassy-time-driver/tick-hz-100" ];
          "tick-hz-100_000" = [ "embassy-time-driver/tick-hz-100_000" ];
          "tick-hz-100_000_000" = [ "embassy-time-driver/tick-hz-100_000_000" ];
          "tick-hz-10_000" = [ "embassy-time-driver/tick-hz-10_000" ];
          "tick-hz-10_000_000" = [ "embassy-time-driver/tick-hz-10_000_000" ];
          "tick-hz-10_240_000" = [ "embassy-time-driver/tick-hz-10_240_000" ];
          "tick-hz-110_000_000" = [ "embassy-time-driver/tick-hz-110_000_000" ];
          "tick-hz-120_000_000" = [ "embassy-time-driver/tick-hz-120_000_000" ];
          "tick-hz-128" = [ "embassy-time-driver/tick-hz-128" ];
          "tick-hz-128_000" = [ "embassy-time-driver/tick-hz-128_000" ];
          "tick-hz-128_000_000" = [ "embassy-time-driver/tick-hz-128_000_000" ];
          "tick-hz-12_000_000" = [ "embassy-time-driver/tick-hz-12_000_000" ];
          "tick-hz-130_000_000" = [ "embassy-time-driver/tick-hz-130_000_000" ];
          "tick-hz-131_072" = [ "embassy-time-driver/tick-hz-131_072" ];
          "tick-hz-131_072_000" = [ "embassy-time-driver/tick-hz-131_072_000" ];
          "tick-hz-140_000_000" = [ "embassy-time-driver/tick-hz-140_000_000" ];
          "tick-hz-144_000_000" = [ "embassy-time-driver/tick-hz-144_000_000" ];
          "tick-hz-150_000_000" = [ "embassy-time-driver/tick-hz-150_000_000" ];
          "tick-hz-16" = [ "embassy-time-driver/tick-hz-16" ];
          "tick-hz-160_000" = [ "embassy-time-driver/tick-hz-160_000" ];
          "tick-hz-160_000_000" = [ "embassy-time-driver/tick-hz-160_000_000" ];
          "tick-hz-163_840_000" = [ "embassy-time-driver/tick-hz-163_840_000" ];
          "tick-hz-16_000" = [ "embassy-time-driver/tick-hz-16_000" ];
          "tick-hz-16_000_000" = [ "embassy-time-driver/tick-hz-16_000_000" ];
          "tick-hz-16_384" = [ "embassy-time-driver/tick-hz-16_384" ];
          "tick-hz-16_384_000" = [ "embassy-time-driver/tick-hz-16_384_000" ];
          "tick-hz-16_777_216" = [ "embassy-time-driver/tick-hz-16_777_216" ];
          "tick-hz-170_000_000" = [ "embassy-time-driver/tick-hz-170_000_000" ];
          "tick-hz-180_000_000" = [ "embassy-time-driver/tick-hz-180_000_000" ];
          "tick-hz-18_000_000" = [ "embassy-time-driver/tick-hz-18_000_000" ];
          "tick-hz-190_000_000" = [ "embassy-time-driver/tick-hz-190_000_000" ];
          "tick-hz-192_000_000" = [ "embassy-time-driver/tick-hz-192_000_000" ];
          "tick-hz-1_000" = [ "embassy-time-driver/tick-hz-1_000" ];
          "tick-hz-1_000_000" = [ "embassy-time-driver/tick-hz-1_000_000" ];
          "tick-hz-1_000_000_000" = [ "embassy-time-driver/tick-hz-1_000_000_000" ];
          "tick-hz-1_024" = [ "embassy-time-driver/tick-hz-1_024" ];
          "tick-hz-1_024_000" = [ "embassy-time-driver/tick-hz-1_024_000" ];
          "tick-hz-1_048_576" = [ "embassy-time-driver/tick-hz-1_048_576" ];
          "tick-hz-1_280_000" = [ "embassy-time-driver/tick-hz-1_280_000" ];
          "tick-hz-1_310_720_000" = [ "embassy-time-driver/tick-hz-1_310_720_000" ];
          "tick-hz-2" = [ "embassy-time-driver/tick-hz-2" ];
          "tick-hz-200_000_000" = [ "embassy-time-driver/tick-hz-200_000_000" ];
          "tick-hz-20_000" = [ "embassy-time-driver/tick-hz-20_000" ];
          "tick-hz-20_000_000" = [ "embassy-time-driver/tick-hz-20_000_000" ];
          "tick-hz-20_480_000" = [ "embassy-time-driver/tick-hz-20_480_000" ];
          "tick-hz-210_000_000" = [ "embassy-time-driver/tick-hz-210_000_000" ];
          "tick-hz-220_000_000" = [ "embassy-time-driver/tick-hz-220_000_000" ];
          "tick-hz-230_000_000" = [ "embassy-time-driver/tick-hz-230_000_000" ];
          "tick-hz-240_000_000" = [ "embassy-time-driver/tick-hz-240_000_000" ];
          "tick-hz-24_000_000" = [ "embassy-time-driver/tick-hz-24_000_000" ];
          "tick-hz-250_000_000" = [ "embassy-time-driver/tick-hz-250_000_000" ];
          "tick-hz-256" = [ "embassy-time-driver/tick-hz-256" ];
          "tick-hz-256_000" = [ "embassy-time-driver/tick-hz-256_000" ];
          "tick-hz-256_000_000" = [ "embassy-time-driver/tick-hz-256_000_000" ];
          "tick-hz-260_000_000" = [ "embassy-time-driver/tick-hz-260_000_000" ];
          "tick-hz-262_144" = [ "embassy-time-driver/tick-hz-262_144" ];
          "tick-hz-262_144_000" = [ "embassy-time-driver/tick-hz-262_144_000" ];
          "tick-hz-270_000_000" = [ "embassy-time-driver/tick-hz-270_000_000" ];
          "tick-hz-280_000_000" = [ "embassy-time-driver/tick-hz-280_000_000" ];
          "tick-hz-288_000_000" = [ "embassy-time-driver/tick-hz-288_000_000" ];
          "tick-hz-290_000_000" = [ "embassy-time-driver/tick-hz-290_000_000" ];
          "tick-hz-2_000" = [ "embassy-time-driver/tick-hz-2_000" ];
          "tick-hz-2_000_000" = [ "embassy-time-driver/tick-hz-2_000_000" ];
          "tick-hz-2_048" = [ "embassy-time-driver/tick-hz-2_048" ];
          "tick-hz-2_048_000" = [ "embassy-time-driver/tick-hz-2_048_000" ];
          "tick-hz-2_097_152" = [ "embassy-time-driver/tick-hz-2_097_152" ];
          "tick-hz-2_560_000" = [ "embassy-time-driver/tick-hz-2_560_000" ];
          "tick-hz-2_621_440_000" = [ "embassy-time-driver/tick-hz-2_621_440_000" ];
          "tick-hz-300_000_000" = [ "embassy-time-driver/tick-hz-300_000_000" ];
          "tick-hz-30_000_000" = [ "embassy-time-driver/tick-hz-30_000_000" ];
          "tick-hz-32" = [ "embassy-time-driver/tick-hz-32" ];
          "tick-hz-320_000" = [ "embassy-time-driver/tick-hz-320_000" ];
          "tick-hz-320_000_000" = [ "embassy-time-driver/tick-hz-320_000_000" ];
          "tick-hz-327_680_000" = [ "embassy-time-driver/tick-hz-327_680_000" ];
          "tick-hz-32_000" = [ "embassy-time-driver/tick-hz-32_000" ];
          "tick-hz-32_000_000" = [ "embassy-time-driver/tick-hz-32_000_000" ];
          "tick-hz-32_768" = [ "embassy-time-driver/tick-hz-32_768" ];
          "tick-hz-32_768_000" = [ "embassy-time-driver/tick-hz-32_768_000" ];
          "tick-hz-340_000_000" = [ "embassy-time-driver/tick-hz-340_000_000" ];
          "tick-hz-360_000_000" = [ "embassy-time-driver/tick-hz-360_000_000" ];
          "tick-hz-36_000_000" = [ "embassy-time-driver/tick-hz-36_000_000" ];
          "tick-hz-380_000_000" = [ "embassy-time-driver/tick-hz-380_000_000" ];
          "tick-hz-384_000_000" = [ "embassy-time-driver/tick-hz-384_000_000" ];
          "tick-hz-3_000_000" = [ "embassy-time-driver/tick-hz-3_000_000" ];
          "tick-hz-4" = [ "embassy-time-driver/tick-hz-4" ];
          "tick-hz-400_000_000" = [ "embassy-time-driver/tick-hz-400_000_000" ];
          "tick-hz-40_000" = [ "embassy-time-driver/tick-hz-40_000" ];
          "tick-hz-40_000_000" = [ "embassy-time-driver/tick-hz-40_000_000" ];
          "tick-hz-40_960_000" = [ "embassy-time-driver/tick-hz-40_960_000" ];
          "tick-hz-420_000_000" = [ "embassy-time-driver/tick-hz-420_000_000" ];
          "tick-hz-440_000_000" = [ "embassy-time-driver/tick-hz-440_000_000" ];
          "tick-hz-460_000_000" = [ "embassy-time-driver/tick-hz-460_000_000" ];
          "tick-hz-480_000_000" = [ "embassy-time-driver/tick-hz-480_000_000" ];
          "tick-hz-48_000_000" = [ "embassy-time-driver/tick-hz-48_000_000" ];
          "tick-hz-4_000" = [ "embassy-time-driver/tick-hz-4_000" ];
          "tick-hz-4_000_000" = [ "embassy-time-driver/tick-hz-4_000_000" ];
          "tick-hz-4_096" = [ "embassy-time-driver/tick-hz-4_096" ];
          "tick-hz-4_096_000" = [ "embassy-time-driver/tick-hz-4_096_000" ];
          "tick-hz-4_194_304" = [ "embassy-time-driver/tick-hz-4_194_304" ];
          "tick-hz-500_000_000" = [ "embassy-time-driver/tick-hz-500_000_000" ];
          "tick-hz-50_000_000" = [ "embassy-time-driver/tick-hz-50_000_000" ];
          "tick-hz-512" = [ "embassy-time-driver/tick-hz-512" ];
          "tick-hz-512_000" = [ "embassy-time-driver/tick-hz-512_000" ];
          "tick-hz-512_000_000" = [ "embassy-time-driver/tick-hz-512_000_000" ];
          "tick-hz-520_000_000" = [ "embassy-time-driver/tick-hz-520_000_000" ];
          "tick-hz-524_288" = [ "embassy-time-driver/tick-hz-524_288" ];
          "tick-hz-524_288_000" = [ "embassy-time-driver/tick-hz-524_288_000" ];
          "tick-hz-540_000_000" = [ "embassy-time-driver/tick-hz-540_000_000" ];
          "tick-hz-560_000_000" = [ "embassy-time-driver/tick-hz-560_000_000" ];
          "tick-hz-576_000_000" = [ "embassy-time-driver/tick-hz-576_000_000" ];
          "tick-hz-580_000_000" = [ "embassy-time-driver/tick-hz-580_000_000" ];
          "tick-hz-5_120_000" = [ "embassy-time-driver/tick-hz-5_120_000" ];
          "tick-hz-5_242_880_000" = [ "embassy-time-driver/tick-hz-5_242_880_000" ];
          "tick-hz-600_000_000" = [ "embassy-time-driver/tick-hz-600_000_000" ];
          "tick-hz-60_000_000" = [ "embassy-time-driver/tick-hz-60_000_000" ];
          "tick-hz-620_000_000" = [ "embassy-time-driver/tick-hz-620_000_000" ];
          "tick-hz-64" = [ "embassy-time-driver/tick-hz-64" ];
          "tick-hz-640_000" = [ "embassy-time-driver/tick-hz-640_000" ];
          "tick-hz-640_000_000" = [ "embassy-time-driver/tick-hz-640_000_000" ];
          "tick-hz-64_000" = [ "embassy-time-driver/tick-hz-64_000" ];
          "tick-hz-64_000_000" = [ "embassy-time-driver/tick-hz-64_000_000" ];
          "tick-hz-655_360_000" = [ "embassy-time-driver/tick-hz-655_360_000" ];
          "tick-hz-65_536" = [ "embassy-time-driver/tick-hz-65_536" ];
          "tick-hz-65_536_000" = [ "embassy-time-driver/tick-hz-65_536_000" ];
          "tick-hz-660_000_000" = [ "embassy-time-driver/tick-hz-660_000_000" ];
          "tick-hz-680_000_000" = [ "embassy-time-driver/tick-hz-680_000_000" ];
          "tick-hz-6_000_000" = [ "embassy-time-driver/tick-hz-6_000_000" ];
          "tick-hz-700_000_000" = [ "embassy-time-driver/tick-hz-700_000_000" ];
          "tick-hz-70_000_000" = [ "embassy-time-driver/tick-hz-70_000_000" ];
          "tick-hz-720_000_000" = [ "embassy-time-driver/tick-hz-720_000_000" ];
          "tick-hz-72_000_000" = [ "embassy-time-driver/tick-hz-72_000_000" ];
          "tick-hz-740_000_000" = [ "embassy-time-driver/tick-hz-740_000_000" ];
          "tick-hz-760_000_000" = [ "embassy-time-driver/tick-hz-760_000_000" ];
          "tick-hz-768_000_000" = [ "embassy-time-driver/tick-hz-768_000_000" ];
          "tick-hz-780_000_000" = [ "embassy-time-driver/tick-hz-780_000_000" ];
          "tick-hz-8" = [ "embassy-time-driver/tick-hz-8" ];
          "tick-hz-800_000_000" = [ "embassy-time-driver/tick-hz-800_000_000" ];
          "tick-hz-80_000" = [ "embassy-time-driver/tick-hz-80_000" ];
          "tick-hz-80_000_000" = [ "embassy-time-driver/tick-hz-80_000_000" ];
          "tick-hz-81_920_000" = [ "embassy-time-driver/tick-hz-81_920_000" ];
          "tick-hz-820_000_000" = [ "embassy-time-driver/tick-hz-820_000_000" ];
          "tick-hz-840_000_000" = [ "embassy-time-driver/tick-hz-840_000_000" ];
          "tick-hz-860_000_000" = [ "embassy-time-driver/tick-hz-860_000_000" ];
          "tick-hz-880_000_000" = [ "embassy-time-driver/tick-hz-880_000_000" ];
          "tick-hz-8_000" = [ "embassy-time-driver/tick-hz-8_000" ];
          "tick-hz-8_000_000" = [ "embassy-time-driver/tick-hz-8_000_000" ];
          "tick-hz-8_192" = [ "embassy-time-driver/tick-hz-8_192" ];
          "tick-hz-8_192_000" = [ "embassy-time-driver/tick-hz-8_192_000" ];
          "tick-hz-8_388_608" = [ "embassy-time-driver/tick-hz-8_388_608" ];
          "tick-hz-900_000_000" = [ "embassy-time-driver/tick-hz-900_000_000" ];
          "tick-hz-90_000_000" = [ "embassy-time-driver/tick-hz-90_000_000" ];
          "tick-hz-920_000_000" = [ "embassy-time-driver/tick-hz-920_000_000" ];
          "tick-hz-940_000_000" = [ "embassy-time-driver/tick-hz-940_000_000" ];
          "tick-hz-960_000_000" = [ "embassy-time-driver/tick-hz-960_000_000" ];
          "tick-hz-96_000_000" = [ "embassy-time-driver/tick-hz-96_000_000" ];
          "tick-hz-980_000_000" = [ "embassy-time-driver/tick-hz-980_000_000" ];
          "tick-hz-9_000_000" = [ "embassy-time-driver/tick-hz-9_000_000" ];
          "wasm" = [ "dep:wasm-bindgen" "dep:js-sys" "dep:wasm-timer" "tick-hz-1_000_000" "dep:embassy-time-queue-utils" ];
        };
        resolvedDefaultFeatures = [ "defmt" "defmt-timestamp-uptime" "tick-hz-32_768" ];
      };
      "embassy-time-driver" = rec {
        crateName = "embassy-time-driver";
        version = "0.2.0";
        edition = "2021";
        links = "embassy-time";
        sha256 = "1fkyxcaznpcfzmw1a6k6mw7s3ylbn5qdxhmhmb98pndn6gcgaicd";
        libName = "embassy_time_driver";
        dependencies = [
          {
            name = "document-features";
            packageId = "document-features";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "tick-hz-32_768" ];
      };
      "embassy-time-queue-utils" = rec {
        crateName = "embassy-time-queue-utils";
        version = "0.1.0";
        edition = "2021";
        links = "embassy-time-queue";
        sha256 = "10wg9l342aq9fihx1k30rx98iyvmcnbww2bd2rdsc239s54cfmfw";
        libName = "embassy_time_queue_utils";
        dependencies = [
          {
            name = "embassy-executor";
            packageId = "embassy-executor";
          }
          {
            name = "heapless";
            packageId = "heapless";
          }
        ];
        features = {
          "generic-queue-128" = [ "_generic-queue" ];
          "generic-queue-16" = [ "_generic-queue" ];
          "generic-queue-32" = [ "_generic-queue" ];
          "generic-queue-64" = [ "_generic-queue" ];
          "generic-queue-8" = [ "_generic-queue" ];
        };
      };
      "embassy-usb" = rec {
        crateName = "embassy-usb";
        version = "0.4.0";
        edition = "2021";
        sha256 = "11k3rfh04dk461qr2h9nqfi9221h5rp0m56iwvk19da7gfdinrbf";
        libName = "embassy_usb";
        dependencies = [
          {
            name = "defmt";
            packageId = "defmt 0.3.100";
            optional = true;
          }
          {
            name = "embassy-futures";
            packageId = "embassy-futures";
          }
          {
            name = "embassy-net-driver-channel";
            packageId = "embassy-net-driver-channel";
          }
          {
            name = "embassy-sync";
            packageId = "embassy-sync 0.6.2";
          }
          {
            name = "embassy-usb-driver";
            packageId = "embassy-usb-driver";
          }
          {
            name = "heapless";
            packageId = "heapless";
          }
          {
            name = "ssmarshal";
            packageId = "ssmarshal";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "usbd-hid";
            packageId = "usbd-hid";
            optional = true;
          }
        ];
        features = {
          "default" = [ "usbd-hid" ];
          "defmt" = [ "dep:defmt" "embassy-usb-driver/defmt" ];
          "log" = [ "dep:log" ];
          "usbd-hid" = [ "dep:usbd-hid" "dep:ssmarshal" ];
        };
        resolvedDefaultFeatures = [ "default" "defmt" "usbd-hid" ];
      };
      "embassy-usb-driver" = rec {
        crateName = "embassy-usb-driver";
        version = "0.1.0";
        edition = "2021";
        sha256 = "0w0r4dyk4clggblgam26xymnlczdn4sll41mcr5if15fiq14ghjg";
        libName = "embassy_usb_driver";
        dependencies = [
          {
            name = "defmt";
            packageId = "defmt 0.3.100";
            optional = true;
          }
        ];
        features = {
          "defmt" = [ "dep:defmt" ];
        };
        resolvedDefaultFeatures = [ "defmt" ];
      };
      "embassy-usb-synopsys-otg" = rec {
        crateName = "embassy-usb-synopsys-otg";
        version = "0.2.0";
        edition = "2021";
        sha256 = "1mrnci5b2h9llxqfsjb69l22413d09j44hxcqy09fclr6yr57rq8";
        libName = "embassy_usb_synopsys_otg";
        dependencies = [
          {
            name = "critical-section";
            packageId = "critical-section";
          }
          {
            name = "defmt";
            packageId = "defmt 0.3.100";
            optional = true;
          }
          {
            name = "embassy-sync";
            packageId = "embassy-sync 0.6.2";
          }
          {
            name = "embassy-usb-driver";
            packageId = "embassy-usb-driver";
          }
        ];
        features = {
          "defmt" = [ "dep:defmt" ];
          "log" = [ "dep:log" ];
        };
        resolvedDefaultFeatures = [ "defmt" ];
      };
      "embedded-can" = rec {
        crateName = "embedded-can";
        version = "0.4.1";
        edition = "2018";
        sha256 = "0f4lmwdn1rc8764smr6jydf1fyf6vlc8sjgsd3gk5j3sz1byilp9";
        libName = "embedded_can";
        dependencies = [
          {
            name = "nb";
            packageId = "nb 1.1.0";
          }
        ];

      };
      "embedded-hal 0.2.7" = rec {
        crateName = "embedded-hal";
        version = "0.2.7";
        edition = "2015";
        sha256 = "1zv6pkgg2yl0mzvh3jp326rhryqfnv4l27h78v7p7maag629i51m";
        libName = "embedded_hal";
        authors = [
          "The Embedded HAL Team <embedded-hal@teams.rust-embedded.org>"
          "Jorge Aparicio <jorge@japaric.io>"
          "Jonathan 'theJPster' Pallant <github@thejpster.org.uk>"
        ];
        dependencies = [
          {
            name = "nb";
            packageId = "nb 0.1.3";
          }
          {
            name = "void";
            packageId = "void";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "unproven" = [ "nb/unstable" ];
        };
        resolvedDefaultFeatures = [ "unproven" ];
      };
      "embedded-hal 1.0.0" = rec {
        crateName = "embedded-hal";
        version = "1.0.0";
        edition = "2021";
        sha256 = "128bb4h3kw8gvz6w7xa0z0j6nrk5jhm3aa7v350clkh0nzz906in";
        libName = "embedded_hal";
        authors = [
          "The Embedded HAL Team <embedded-hal@teams.rust-embedded.org>"
          "Jorge Aparicio <jorge@japaric.io>"
          "Jonathan 'theJPster' Pallant <github@thejpster.org.uk>"
        ];
        features = {
          "defmt-03" = [ "dep:defmt-03" ];
        };
      };
      "embedded-hal-async" = rec {
        crateName = "embedded-hal-async";
        version = "1.0.0";
        edition = "2021";
        sha256 = "110q7zxsis2wl7gwshg86gpq0fgd85la4kfxqv1i7zppprdnhk0c";
        libName = "embedded_hal_async";
        authors = [
          "The Embedded HAL Team and Contributors <embedded-hal@teams.rust-embedded.org>"
        ];
        dependencies = [
          {
            name = "embedded-hal";
            packageId = "embedded-hal 1.0.0";
          }
        ];
        features = {
          "defmt-03" = [ "dep:defmt-03" "embedded-hal/defmt-03" ];
        };
      };
      "embedded-hal-nb" = rec {
        crateName = "embedded-hal-nb";
        version = "1.0.0";
        edition = "2021";
        sha256 = "01c65qa4hihvmwqkgmy6yrqf3nxb5fqmk7i9jn4q53182j62d97v";
        libName = "embedded_hal_nb";
        dependencies = [
          {
            name = "embedded-hal";
            packageId = "embedded-hal 1.0.0";
          }
          {
            name = "nb";
            packageId = "nb 1.1.0";
          }
        ];

      };
      "embedded-io" = rec {
        crateName = "embedded-io";
        version = "0.6.1";
        edition = "2021";
        sha256 = "0v901xykajh3zffn6x4cnn4fhgfw3c8qpjwbsk6gai3gaccg3l7d";
        libName = "embedded_io";
        dependencies = [
          {
            name = "defmt";
            packageId = "defmt 0.3.100";
            rename = "defmt-03";
            optional = true;
          }
        ];
        features = {
          "defmt-03" = [ "dep:defmt-03" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "defmt-03" ];
      };
      "embedded-io-async" = rec {
        crateName = "embedded-io-async";
        version = "0.6.1";
        edition = "2021";
        sha256 = "0gxs1pawhwxgc8fifqynkiifg0nmc58yfnrrk71ahfh7sir9kw1z";
        libName = "embedded_io_async";
        dependencies = [
          {
            name = "defmt";
            packageId = "defmt 0.3.100";
            rename = "defmt-03";
            optional = true;
          }
          {
            name = "embedded-io";
            packageId = "embedded-io";
          }
        ];
        features = {
          "alloc" = [ "embedded-io/alloc" ];
          "defmt-03" = [ "dep:defmt-03" "embedded-io/defmt-03" ];
          "std" = [ "alloc" "embedded-io/std" ];
        };
        resolvedDefaultFeatures = [ "defmt-03" ];
      };
      "embedded-nal" = rec {
        crateName = "embedded-nal";
        version = "0.9.0";
        edition = "2021";
        sha256 = "0xzdwrqs89nh6vbssi1jh3bn6bzh1f537v3qy4l2z68s36z2hsn5";
        libName = "embedded_nal";
        authors = [
          "Jonathan 'theJPster' Pallant <github@thejpster.org.uk>"
          "Mathias Koch <mk@blackbird.online>"
          "Diego Barrios Romero <eldruin@gmail.com>"
          "Ryan Summers <ryan.summers@vertigo-designs.com>"
        ];
        dependencies = [
          {
            name = "nb";
            packageId = "nb 1.1.0";
          }
        ];

      };
      "embedded-nal-async" = rec {
        crateName = "embedded-nal-async";
        version = "0.8.0";
        edition = "2021";
        sha256 = "04dj7kc2ii7aay11q926sxlzmlfx9ridb3f2k05g91ibrlbrk5bn";
        libName = "embedded_nal_async";
        dependencies = [
          {
            name = "embedded-io-async";
            packageId = "embedded-io-async";
          }
          {
            name = "embedded-nal";
            packageId = "embedded-nal";
          }
        ];

      };
      "embedded-storage" = rec {
        crateName = "embedded-storage";
        version = "0.3.1";
        edition = "2018";
        sha256 = "0cn0q1mjgv3i67nllivk199dlxmrx662441d0vrn1f5yajcfl7d2";
        libName = "embedded_storage";
        authors = [
          "Mathias Koch <mk@blackbird.online>"
        ];

      };
      "embedded-storage-async" = rec {
        crateName = "embedded-storage-async";
        version = "0.4.1";
        edition = "2018";
        sha256 = "1k0mrm6xc1mdxr0drxbivqpa1kr1brznb430mbqdbdr34dg7fqqp";
        libName = "embedded_storage_async";
        authors = [
          "Mathias Koch <mk@blackbird.online>"
          "Ulf Lilleengen <lulf@redhat.com>"
          "Dario Nieuwenhuis <dirbaio@dirbaio.net>"
          "Diego Barrios Romero <eldruin@gmail.com>"
        ];
        dependencies = [
          {
            name = "embedded-storage";
            packageId = "embedded-storage";
          }
        ];

      };
      "encode_unicode" = rec {
        crateName = "encode_unicode";
        version = "0.3.6";
        edition = "2015";
        sha256 = "07w3vzrhxh9lpjgsg2y5bwzfar2aq35mdznvcp3zjl0ssj7d4mx3";
        authors = [
          "Torbjørn Birch Moltu <t.b.moltu@lyse.net>"
        ];
        features = {
          "ascii" = [ "dep:ascii" ];
          "clippy" = [ "dep:clippy" ];
          "default" = [ "std" ];
        };
      };
      "fnv" = rec {
        crateName = "fnv";
        version = "1.0.7";
        edition = "2015";
        sha256 = "1hc2mcqha06aibcaza94vbi81j6pr9a1bbxrxjfhc91zin8yr7iz";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "futures-core" = rec {
        crateName = "futures-core";
        version = "0.3.31";
        edition = "2018";
        sha256 = "0gk6yrxgi5ihfanm2y431jadrll00n5ifhnpx090c2f2q1cr1wh5";
        libName = "futures_core";
        features = {
          "default" = [ "std" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "std" = [ "alloc" ];
        };
      };
      "futures-sink" = rec {
        crateName = "futures-sink";
        version = "0.3.31";
        edition = "2018";
        sha256 = "1xyly6naq6aqm52d5rh236snm08kw8zadydwqz8bip70s6vzlxg5";
        libName = "futures_sink";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
      };
      "futures-task" = rec {
        crateName = "futures-task";
        version = "0.3.31";
        edition = "2018";
        sha256 = "124rv4n90f5xwfsm9qw6y99755y021cmi5dhzh253s920z77s3zr";
        libName = "futures_task";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
      };
      "futures-util" = rec {
        crateName = "futures-util";
        version = "0.3.31";
        edition = "2018";
        sha256 = "10aa1ar8bgkgbr4wzxlidkqkcxf77gffyj8j7768h831pcaq784z";
        libName = "futures_util";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" "futures-task/alloc" ];
          "async-await-macro" = [ "async-await" "futures-macro" ];
          "channel" = [ "std" "futures-channel" ];
          "compat" = [ "std" "futures_01" ];
          "default" = [ "std" "async-await" "async-await-macro" ];
          "futures-channel" = [ "dep:futures-channel" ];
          "futures-io" = [ "dep:futures-io" ];
          "futures-macro" = [ "dep:futures-macro" ];
          "futures-sink" = [ "dep:futures-sink" ];
          "futures_01" = [ "dep:futures_01" ];
          "io" = [ "std" "futures-io" "memchr" ];
          "io-compat" = [ "io" "compat" "tokio-io" ];
          "memchr" = [ "dep:memchr" ];
          "portable-atomic" = [ "futures-core/portable-atomic" ];
          "sink" = [ "futures-sink" ];
          "slab" = [ "dep:slab" ];
          "std" = [ "alloc" "futures-core/std" "futures-task/std" "slab" ];
          "tokio-io" = [ "dep:tokio-io" ];
          "unstable" = [ "futures-core/unstable" "futures-task/unstable" ];
          "write-all-vectored" = [ "io" ];
        };
      };
      "generic-array" = rec {
        crateName = "generic-array";
        version = "0.14.7";
        edition = "2015";
        sha256 = "16lyyrzrljfq424c3n8kfwkqihlimmsg5nhshbbp48np3yjrqr45";
        libName = "generic_array";
        authors = [
          "Bartłomiej Kamiński <fizyk20@gmail.com>"
          "Aaron Trent <novacrazy@gmail.com>"
        ];
        dependencies = [
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "more_lengths" ];
      };
      "hash32" = rec {
        crateName = "hash32";
        version = "0.3.1";
        edition = "2015";
        sha256 = "01h68z8qi5gl9lnr17nz10lay8wjiidyjdyd60kqx8ibj090pmj7";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
        ];

      };
      "hashbrown" = rec {
        crateName = "hashbrown";
        version = "0.13.2";
        edition = "2021";
        sha256 = "03ji3n19j4b6mf2wlla81vsixcmlivglp6hgk79d1pcxfcrw38s3";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "alloc" = [ "dep:alloc" ];
          "bumpalo" = [ "dep:bumpalo" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "ahash" "inline-more" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "ahash" "default" "inline-more" ];
      };
      "heapless" = rec {
        crateName = "heapless";
        version = "0.8.0";
        edition = "2021";
        sha256 = "1b9zpdjv4qkl2511s2c80fz16fx9in4m9qkhbaa8j73032v9xyqb";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
          "Per Lindgren <per.lindgren@ltu.se>"
          "Emil Fresk <emil.fresk@gmail.com>"
        ];
        dependencies = [
          {
            name = "defmt";
            packageId = "defmt 0.3.100";
            optional = true;
          }
          {
            name = "hash32";
            packageId = "hash32";
          }
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "defmt-03" = [ "dep:defmt" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "portable-atomic-critical-section" = [ "dep:portable-atomic" "portable-atomic" "portable-atomic?/critical-section" ];
          "portable-atomic-unsafe-assume-single-core" = [ "dep:portable-atomic" "portable-atomic" "portable-atomic?/unsafe-assume-single-core" ];
          "serde" = [ "dep:serde" ];
          "ufmt" = [ "dep:ufmt-write" ];
        };
        resolvedDefaultFeatures = [ "defmt-03" ];
      };
      "ident_case" = rec {
        crateName = "ident_case";
        version = "1.0.1";
        edition = "2015";
        sha256 = "0fac21q6pwns8gh1hz3nbq15j8fi441ncl6w4vlnd1cmc55kiq5r";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];

      };
      "litrs" = rec {
        crateName = "litrs";
        version = "0.4.1";
        edition = "2018";
        sha256 = "19cssch9gc0x2snd9089nvwzz79zx6nzsi3icffpx25p4hck1kml";
        authors = [
          "Lukas Kalbertodt <lukas.kalbertodt@gmail.com>"
        ];
        features = {
          "check_suffix" = [ "unicode-xid" ];
          "default" = [ "proc-macro2" ];
          "proc-macro2" = [ "dep:proc-macro2" ];
          "unicode-xid" = [ "dep:unicode-xid" ];
        };
      };
      "log" = rec {
        crateName = "log";
        version = "0.4.27";
        edition = "2021";
        sha256 = "150x589dqil307rv0rwj0jsgz5bjbwvl83gyl61jf873a7rjvp0k";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "kv_serde" = [ "kv_std" "value-bag/serde" "serde" ];
          "kv_std" = [ "std" "kv" "value-bag/error" ];
          "kv_sval" = [ "kv" "value-bag/sval" "sval" "sval_ref" ];
          "kv_unstable" = [ "kv" "value-bag" ];
          "kv_unstable_serde" = [ "kv_serde" "kv_unstable_std" ];
          "kv_unstable_std" = [ "kv_std" "kv_unstable" ];
          "kv_unstable_sval" = [ "kv_sval" "kv_unstable" ];
          "serde" = [ "dep:serde" ];
          "sval" = [ "dep:sval" ];
          "sval_ref" = [ "dep:sval_ref" ];
          "value-bag" = [ "dep:value-bag" ];
        };
      };
      "managed" = rec {
        crateName = "managed";
        version = "0.8.0";
        edition = "2015";
        sha256 = "13b1j5gpm55jxk24qrbpc25j0ds47bkk9g83d04kp50ab9r8va0c";
        authors = [
          "whitequark <whitequark@whitequark.org>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "map" ];
      };
      "nb 0.1.3" = rec {
        crateName = "nb";
        version = "0.1.3";
        edition = "2015";
        sha256 = "0vyh31pbwrg21f8hz1ipb9i20qwnfwx47gz92i9frdhk0pd327c0";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
        ];
        dependencies = [
          {
            name = "nb";
            packageId = "nb 1.1.0";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "unstable" ];
      };
      "nb 1.1.0" = rec {
        crateName = "nb";
        version = "1.1.0";
        edition = "2018";
        sha256 = "179kbn9l6vhshncycagis7f8mfjppz4fhvgnmcikqz30mp23jm4d";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
        ];
        features = {
          "defmt-0-3" = [ "dep:defmt" ];
        };
      };
      "num-traits" = rec {
        crateName = "num-traits";
        version = "0.2.19";
        edition = "2021";
        sha256 = "0h984rhdkkqd4ny9cif7y2azl3xdfb7768hb9irhpsch4q3gq787";
        libName = "num_traits";
        authors = [
          "The Rust Project Developers"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "libm" = [ "dep:libm" ];
        };
      };
      "once_cell" = rec {
        crateName = "once_cell";
        version = "1.21.3";
        edition = "2021";
        sha256 = "0b9x77lb9f1j6nqgf5aka4s2qj0nly176bpbrv6f9iakk5ff3xa2";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        features = {
          "alloc" = [ "race" ];
          "atomic-polyfill" = [ "critical-section" ];
          "critical-section" = [ "dep:critical-section" "portable-atomic" ];
          "default" = [ "std" ];
          "parking_lot" = [ "dep:parking_lot_core" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "race" ];
      };
      "panic-probe" = rec {
        crateName = "panic-probe";
        version = "1.0.0";
        edition = "2021";
        sha256 = "06hsgrsc1ll6dlb3yi0c5qkb3138lh2940h0w2pcb57vn002sh7x";
        libName = "panic_probe";
        authors = [
          "The Knurling Authors"
        ];
        dependencies = [
          {
            name = "cortex-m";
            packageId = "cortex-m";
          }
          {
            name = "defmt";
            packageId = "defmt 1.0.1";
            optional = true;
          }
        ];
        features = {
          "defmt" = [ "dep:defmt" ];
          "print-defmt" = [ "defmt" "defmt-error" ];
          "print-rtt" = [ "rtt-target" ];
          "rtt-target" = [ "dep:rtt-target" ];
        };
        resolvedDefaultFeatures = [ "defmt" "defmt-error" "print-defmt" ];
      };
      "pin-project-lite" = rec {
        crateName = "pin-project-lite";
        version = "0.2.16";
        edition = "2018";
        sha256 = "16wzc7z7dfkf9bmjin22f5282783f6mdksnr0nv0j5ym5f9gyg1v";
        libName = "pin_project_lite";

      };
      "pin-utils" = rec {
        crateName = "pin-utils";
        version = "0.1.0";
        edition = "2018";
        sha256 = "117ir7vslsl2z1a7qzhws4pd01cg2d3338c47swjyvqv2n60v1wb";
        libName = "pin_utils";
        authors = [
          "Josef Brandl <mail@josefbrandl.de>"
        ];

      };
      "portable-atomic" = rec {
        crateName = "portable-atomic";
        version = "1.11.0";
        edition = "2018";
        sha256 = "0glb2wngflvfmg789qbf6dbnwcf6ai212fs7n0lf1c66rd49n3im";
        libName = "portable_atomic";
        features = {
          "critical-section" = [ "dep:critical-section" ];
          "default" = [ "fallback" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "fallback" ];
      };
      "proc-macro-error-attr2" = rec {
        crateName = "proc-macro-error-attr2";
        version = "2.0.0";
        edition = "2021";
        sha256 = "1ifzi763l7swl258d8ar4wbpxj4c9c2im7zy89avm6xv6vgl5pln";
        procMacro = true;
        libName = "proc_macro_error_attr2";
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
          "GnomedDev <david2005thomas@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
        ];

      };
      "proc-macro-error2" = rec {
        crateName = "proc-macro-error2";
        version = "2.0.1";
        edition = "2021";
        sha256 = "00lq21vgh7mvyx51nwxwf822w2fpww1x0z8z0q47p8705g2hbv0i";
        libName = "proc_macro_error2";
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
          "GnomedDev <david2005thomas@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-error-attr2";
            packageId = "proc-macro-error-attr2";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];
        features = {
          "default" = [ "syn-error" ];
          "syn-error" = [ "dep:syn" ];
        };
        resolvedDefaultFeatures = [ "default" "syn-error" ];
      };
      "proc-macro2" = rec {
        crateName = "proc-macro2";
        version = "1.0.95";
        edition = "2021";
        sha256 = "0y7pwxv6sh4fgg6s715ygk1i7g3w02c0ljgcsfm046isibkfbcq2";
        libName = "proc_macro2";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "quote" = rec {
        crateName = "quote";
        version = "1.0.40";
        edition = "2018";
        sha256 = "1394cxjg6nwld82pzp2d4fp6pmaz32gai1zh9z5hvh0dawww118q";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "rand_core" = rec {
        crateName = "rand_core";
        version = "0.6.4";
        edition = "2018";
        sha256 = "0b4j2v4cb5krak1pv6kakv4sz6xcwbrmy2zckc32hsigbrwy82zc";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        features = {
          "getrandom" = [ "dep:getrandom" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "alloc" "getrandom" "getrandom/std" ];
        };
      };
      "rustc_version" = rec {
        crateName = "rustc_version";
        version = "0.2.3";
        edition = "2015";
        sha256 = "02h3x57lcr8l2pm0a645s9whdh33pn5cnrwvn5cb57vcrc53x3hk";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        dependencies = [
          {
            name = "semver";
            packageId = "semver";
          }
        ];

      };
      "sdio-host" = rec {
        crateName = "sdio-host";
        version = "0.5.0";
        edition = "2018";
        sha256 = "0npq6xqx8nnr485kgl2s7gd27a2l3b8lgklf6a63hk7ykigh4g7r";
        libName = "sdio_host";
        authors = [
          "Johan Kristell <johan@jott.se>"
          "Richard Meadows <richard@richard.fish>"
        ];

      };
      "semver" = rec {
        crateName = "semver";
        version = "0.9.0";
        edition = "2015";
        sha256 = "00q4lkcj0rrgbhviv9sd4p6qmdsipkwkbra7rh11jrhq5kpvjzhx";
        authors = [
          "Steve Klabnik <steve@steveklabnik.com>"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "semver-parser";
            packageId = "semver-parser";
          }
        ];
        features = {
          "ci" = [ "serde" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "semver-parser" = rec {
        crateName = "semver-parser";
        version = "0.7.0";
        edition = "2015";
        sha256 = "18vhypw6zgccnrlm5ps1pwa0khz7ry927iznpr88b87cagr1v2iq";
        libName = "semver_parser";
        authors = [
          "Steve Klabnik <steve@steveklabnik.com>"
        ];

      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.219";
        edition = "2018";
        sha256 = "1dl6nyxnsi82a197sd752128a4avm6mxnscywas1jq30srp2q3jz";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            target = { target, features }: false;
          }
        ];
        devDependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
          "serde_derive" = [ "dep:serde_derive" ];
        };
      };
      "serde_derive" = rec {
        crateName = "serde_derive";
        version = "1.0.219";
        edition = "2015";
        sha256 = "001azhjmj7ya52pmfiw4ppxm16nd44y15j2pf5gkcwrcgz7pc0jv";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
            features = [ "proc-macro" ];
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
            features = [ "proc-macro" ];
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "clone-impls" "derive" "parsing" "printing" "proc-macro" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "signature" = rec {
        crateName = "signature";
        version = "2.2.0";
        edition = "2021";
        sha256 = "1pi9hd5vqfr3q3k49k37z06p7gs5si0in32qia4mmr1dancr6m3p";
        authors = [
          "RustCrypto Developers"
        ];
        features = {
          "derive" = [ "dep:derive" ];
          "digest" = [ "dep:digest" ];
          "rand_core" = [ "dep:rand_core" ];
          "std" = [ "alloc" "rand_core?/std" ];
        };
      };
      "smoltcp" = rec {
        crateName = "smoltcp";
        version = "0.12.0";
        edition = "2021";
        sha256 = "1fzlyrxpxmmv0dnsrvf34cvxsa8k1bbyicfrcv1c2cqmkjc9bl6s";
        authors = [
          "whitequark <whitequark@whitequark.org>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
            usesDefaultFeatures = false;
          }
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "defmt";
            packageId = "defmt 0.3.100";
            optional = true;
            features = [ "ip_in_core" ];
          }
          {
            name = "heapless";
            packageId = "heapless";
          }
          {
            name = "managed";
            packageId = "managed";
            usesDefaultFeatures = false;
            features = [ "map" ];
          }
        ];
        features = {
          "alloc" = [ "managed/alloc" "defmt?/alloc" ];
          "default" = [ "std" "log" "medium-ethernet" "medium-ip" "medium-ieee802154" "phy-raw_socket" "phy-tuntap_interface" "proto-ipv4" "proto-dhcpv4" "proto-ipv6" "proto-dns" "proto-ipv4-fragmentation" "proto-sixlowpan-fragmentation" "socket-raw" "socket-icmp" "socket-udp" "socket-tcp" "socket-dhcpv4" "socket-dns" "socket-mdns" "packetmeta-id" "async" "multicast" ];
          "defmt" = [ "dep:defmt" "heapless/defmt-03" ];
          "libc" = [ "dep:libc" ];
          "log" = [ "dep:log" ];
          "medium-ethernet" = [ "socket" ];
          "medium-ieee802154" = [ "socket" "proto-sixlowpan" ];
          "medium-ip" = [ "socket" ];
          "phy-raw_socket" = [ "std" "libc" ];
          "phy-tuntap_interface" = [ "std" "libc" "medium-ethernet" ];
          "proto-dhcpv4" = [ "proto-ipv4" ];
          "proto-ipsec" = [ "proto-ipsec-ah" "proto-ipsec-esp" ];
          "proto-ipv4-fragmentation" = [ "proto-ipv4" "_proto-fragmentation" ];
          "proto-ipv6-fragmentation" = [ "proto-ipv6" "_proto-fragmentation" ];
          "proto-ipv6-hbh" = [ "proto-ipv6" ];
          "proto-ipv6-routing" = [ "proto-ipv6" ];
          "proto-rpl" = [ "proto-ipv6-hbh" "proto-ipv6-routing" ];
          "proto-sixlowpan" = [ "proto-ipv6" ];
          "proto-sixlowpan-fragmentation" = [ "proto-sixlowpan" "_proto-fragmentation" ];
          "socket-dhcpv4" = [ "socket" "medium-ethernet" "proto-dhcpv4" ];
          "socket-dns" = [ "socket" "proto-dns" ];
          "socket-icmp" = [ "socket" ];
          "socket-mdns" = [ "socket-dns" ];
          "socket-raw" = [ "socket" ];
          "socket-tcp" = [ "socket" ];
          "socket-udp" = [ "socket" ];
          "std" = [ "managed/std" "alloc" ];
        };
        resolvedDefaultFeatures = [ "async" "defmt" "medium-ethernet" "proto-ipv4" "socket" "socket-icmp" "socket-tcp" "socket-udp" ];
      };
      "ssmarshal" = rec {
        crateName = "ssmarshal";
        version = "1.0.0";
        edition = "2015";
        sha256 = "0l5qvcb5knjznr8yaq8dycmhrvcw16wg396z6z9jw698n4isvrpk";
        authors = [
          "Corey Richardson <corey@octayn.net>"
        ];
        dependencies = [
          {
            name = "encode_unicode";
            packageId = "encode_unicode";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "serde/std" ];
        };
      };
      "stable_deref_trait" = rec {
        crateName = "stable_deref_trait";
        version = "1.2.0";
        edition = "2015";
        sha256 = "1lxjr8q2n534b2lhkxd6l6wcddzjvnksi58zv11f9y0jjmr15wd8";
        authors = [
          "Robert Grosse <n210241048576@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
      };
      "static_assertions" = rec {
        crateName = "static_assertions";
        version = "1.1.0";
        edition = "2015";
        sha256 = "0gsl6xmw10gvn3zs1rv99laj5ig7ylffnh71f9l34js4nr4r7sx2";
        authors = [
          "Nikolai Vazquez"
        ];
        features = {
        };
      };
      "static_cell" = rec {
        crateName = "static_cell";
        version = "2.1.0";
        edition = "2021";
        sha256 = "07jcw5k9nlb42r51zzlnd7zw5brl7wsf9c9d50qk922ai220d6yq";
        dependencies = [
          {
            name = "portable-atomic";
            packageId = "portable-atomic";
          }
        ];
        features = {
        };
      };
      "stm32-fmc" = rec {
        crateName = "stm32-fmc";
        version = "0.3.2";
        edition = "2018";
        sha256 = "1345nc51vqfcp42vdjnmw6hl6qsry7a92kf58qj7qc72k69n7w67";
        libName = "stm32_fmc";
        authors = [
          "Richard Meadows <richard@richard.fish>"
        ];
        dependencies = [
          {
            name = "embedded-hal";
            packageId = "embedded-hal 0.2.7";
          }
        ];
        features = {
          "default" = [ "sdram" "nand" ];
          "defmt" = [ "dep:defmt" ];
          "log" = [ "dep:log" ];
        };
        resolvedDefaultFeatures = [ "default" "nand" "sdram" ];
      };
      "stm32-metapac" = rec {
        crateName = "stm32-metapac";
        version = "16.0.0";
        edition = "2021";
        sha256 = "0dsv9y7skpp7br30jrhhvyxhr3wh6c5iifcmk93k4fk5yrh0ylnw";
        libName = "stm32_metapac";
        dependencies = [
          {
            name = "cortex-m";
            packageId = "cortex-m";
          }
          {
            name = "cortex-m-rt";
            packageId = "cortex-m-rt";
            optional = true;
          }
        ];
        features = {
          "cortex-m-rt" = [ "dep:cortex-m-rt" ];
          "default" = [ "pac" ];
          "defmt" = [ "dep:defmt" ];
          "rt" = [ "cortex-m-rt/device" ];
        };
        resolvedDefaultFeatures = [ "cortex-m-rt" "default" "metadata" "pac" "rt" "stm32f303vc" ];
      };
      "strsim" = rec {
        crateName = "strsim";
        version = "0.11.1";
        edition = "2015";
        sha256 = "0kzvqlw8hxqb7y598w1s0hxlnmi84sg5vsipp3yg5na5d1rvba3x";
        authors = [
          "Danny Guo <danny@dannyguo.com>"
          "maxbachmann <oss@maxbachmann.de>"
        ];

      };
      "syn 1.0.109" = rec {
        crateName = "syn";
        version = "1.0.109";
        edition = "2018";
        sha256 = "0ds2if4600bd59wsv7jjgfkayfzy3hnazs394kz6zdkmna8l3dkj";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
          "quote" = [ "dep:quote" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "full" "parsing" "printing" "proc-macro" "quote" "visit" ];
      };
      "syn 2.0.101" = rec {
        crateName = "syn";
        version = "2.0.101";
        edition = "2021";
        sha256 = "1brwsh7fn3bnbj50d2lpwy9akimzb3lghz0ai89j8fhvjkybgqlc";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "dep:quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote?/proc-macro" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "full" "parsing" "printing" "proc-macro" "visit" ];
      };
      "thiserror" = rec {
        crateName = "thiserror";
        version = "2.0.12";
        edition = "2021";
        sha256 = "024791nsc0np63g2pq30cjf9acj38z3jwx9apvvi8qsqmqnqlysn";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "thiserror-impl" = rec {
        crateName = "thiserror-impl";
        version = "2.0.12";
        edition = "2021";
        sha256 = "07bsn7shydaidvyyrm7jz29vp78vrxr9cr9044rfmn078lmz8z3z";
        procMacro = true;
        libName = "thiserror_impl";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "typenum" = rec {
        crateName = "typenum";
        version = "1.18.0";
        edition = "2018";
        sha256 = "0gwgz8n91pv40gabrr1lzji0b0hsmg0817njpy397bq7rvizzk0x";
        authors = [
          "Paho Lurie-Gregg <paho@paholg.com>"
          "Andre Bogus <bogusandre@gmail.com>"
        ];
        features = {
          "scale-info" = [ "dep:scale-info" ];
          "scale_info" = [ "scale-info/derive" ];
        };
      };
      "unicode-ident" = rec {
        crateName = "unicode-ident";
        version = "1.0.18";
        edition = "2018";
        sha256 = "04k5r6sijkafzljykdq26mhjpmhdx4jwzvn1lh90g9ax9903jpss";
        libName = "unicode_ident";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "usb-device" = rec {
        crateName = "usb-device";
        version = "0.3.2";
        edition = "2018";
        sha256 = "19h6bxdk2lsydd387n0rz95hny9xx4khzfb8a440kfxgrhd6p0cq";
        libName = "usb_device";
        authors = [
          "Matti Virkkunen <mvirkkunen@gmail.com>"
        ];
        dependencies = [
          {
            name = "heapless";
            packageId = "heapless";
          }
          {
            name = "portable-atomic";
            packageId = "portable-atomic";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "defmt" = [ "dep:defmt" ];
          "log" = [ "dep:log" ];
        };
      };
      "usbd-hid" = rec {
        crateName = "usbd-hid";
        version = "0.8.2";
        edition = "2021";
        sha256 = "0k0q3rgp2kws4dpb7cidc9cgzmnmp4p8mw40qxf6ha6lafmr3wp6";
        libName = "usbd_hid";
        authors = [
          "twitchyliquid64"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
          {
            name = "ssmarshal";
            packageId = "ssmarshal";
            usesDefaultFeatures = false;
          }
          {
            name = "usb-device";
            packageId = "usb-device";
          }
          {
            name = "usbd-hid-macros";
            packageId = "usbd-hid-macros";
          }
        ];
        features = {
          "defmt" = [ "dep:defmt" "usb-device/defmt" ];
        };
      };
      "usbd-hid-descriptors" = rec {
        crateName = "usbd-hid-descriptors";
        version = "0.8.2";
        edition = "2021";
        sha256 = "1vd321lz6jzbpa8ric7pds460l3vbb7b2hysn8pqsxsx5iqm9vhf";
        libName = "usbd_hid_descriptors";
        authors = [
          "twitchyliquid64"
        ];
        dependencies = [
          {
            name = "bitfield";
            packageId = "bitfield 0.14.0";
          }
        ];

      };
      "usbd-hid-macros" = rec {
        crateName = "usbd-hid-macros";
        version = "0.8.2";
        edition = "2021";
        sha256 = "0f6sri87cxa5mgq0l500c4msi1y16h9aid0sbsn3ah48wxv3qmxv";
        procMacro = true;
        libName = "usbd_hid_macros";
        authors = [
          "twitchyliquid64"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "hashbrown";
            packageId = "hashbrown";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "extra-traits" "full" "visit" ];
          }
          {
            name = "usbd-hid-descriptors";
            packageId = "usbd-hid-descriptors";
          }
        ];

      };
      "vcell" = rec {
        crateName = "vcell";
        version = "0.1.3";
        edition = "2015";
        sha256 = "00n0ss2z3rh0ihig6d4w7xp72g58f7g1m6s5v4h3nc6jacdrqhvp";
        authors = [
          "Jorge Aparicio <japaricious@gmail.com>"
        ];
        features = {
        };
      };
      "version_check" = rec {
        crateName = "version_check";
        version = "0.9.5";
        edition = "2015";
        sha256 = "0nhhi4i5x89gm911azqbn7avs9mdacw2i3vcz3cnmz3mv4rqz4hb";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];

      };
      "void" = rec {
        crateName = "void";
        version = "1.0.2";
        edition = "2015";
        sha256 = "0zc8f0ksxvmhvgx4fdg0zyn6vdnbxd2xv9hfx4nhzg6kbs4f80ka";
        authors = [
          "Jonathan Reem <jonathan.reem@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "volatile-register" = rec {
        crateName = "volatile-register";
        version = "0.2.2";
        edition = "2015";
        sha256 = "1k0rkm81qyhn4r8f03z0sch2kyikkgjjfalpaami9c08c8m7whyy";
        libName = "volatile_register";
        authors = [
          "Jorge Aparicio <japaricious@gmail.com>"
          "Jonathan 'theJPster' Pallant <github@thejpster.org.uk>"
        ];
        dependencies = [
          {
            name = "vcell";
            packageId = "vcell";
          }
        ];

      };
      "zerocopy" = rec {
        crateName = "zerocopy";
        version = "0.8.25";
        edition = "2021";
        sha256 = "1jx07cd3b3456c9al9zjqqdzpf1abb0vf6z0fj8xnb93hfajsw51";
        authors = [
          "Joshua Liebow-Feeser <joshlf@google.com>"
          "Jack Wrenn <jswrenn@amazon.com>"
        ];
        dependencies = [
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
            optional = true;
          }
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
            target = { target, features }: false;
          }
        ];
        devDependencies = [
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
          }
        ];
        features = {
          "__internal_use_only_features_that_work_on_stable" = [ "alloc" "derive" "simd" "std" ];
          "derive" = [ "zerocopy-derive" ];
          "simd-nightly" = [ "simd" ];
          "std" = [ "alloc" ];
          "zerocopy-derive" = [ "dep:zerocopy-derive" ];
        };
        resolvedDefaultFeatures = [ "simd" ];
      };
      "zerocopy-derive" = rec {
        crateName = "zerocopy-derive";
        version = "0.8.25";
        edition = "2021";
        sha256 = "1vsmpq0hp61xpqj9yk8b5jihkqkff05q1wv3l2568mhifl6y59i8";
        procMacro = true;
        libName = "zerocopy_derive";
        authors = [
          "Joshua Liebow-Feeser <joshlf@google.com>"
          "Jack Wrenn <jswrenn@amazon.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];

      };
    };

    #
# crate2nix/default.nix (excerpt start)
#

  /* Target (platform) data for conditional dependencies.
    This corresponds roughly to what buildRustCrate is setting.
  */
  makeDefaultTarget = platform: {
    unix = platform.isUnix;
    windows = platform.isWindows;
    fuchsia = true;
    test = false;

    inherit (platform.rust.platform)
      arch
      os
      vendor;
    family = platform.rust.platform.target-family;
    env = "gnu";
    endian =
      if platform.parsed.cpu.significantByte.name == "littleEndian"
      then "little" else "big";
    pointer_width = toString platform.parsed.cpu.bits;
    debug_assertions = false;
  };

  /* Filters common temp files and build files. */
  # TODO(pkolloch): Substitute with gitignore filter
  sourceFilter = name: type:
    let
      baseName = builtins.baseNameOf (builtins.toString name);
    in
      ! (
        # Filter out git
        baseName == ".gitignore"
        || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (
          type == "directory" && (
            baseName == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )

        # Filter out nix-build result symlinks
        || (
          type == "symlink" && lib.hasPrefix "result" baseName
        )

        # Filter out IDE config
        || (
          type == "directory" && (
            baseName == ".idea" || baseName == ".vscode"
          )
        ) || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

  /* Returns a crate which depends on successful test execution
    of crate given as the second argument.

    testCrateFlags: list of flags to pass to the test exectuable
    testInputs: list of packages that should be available during test execution
  */
  crateWithTest = { crate, testCrate, testCrateFlags, testInputs, testPreRun, testPostRun }:
    assert builtins.typeOf testCrateFlags == "list";
    assert builtins.typeOf testInputs == "list";
    assert builtins.typeOf testPreRun == "string";
    assert builtins.typeOf testPostRun == "string";
    let
      # override the `crate` so that it will build and execute tests instead of
      # building the actual lib and bin targets We just have to pass `--test`
      # to rustc and it will do the right thing.  We execute the tests and copy
      # their log and the test executables to $out for later inspection.
      test =
        let
          drv = testCrate.override
            (
              _: {
                buildTests = true;
              }
            );
          # If the user hasn't set any pre/post commands, we don't want to
          # insert empty lines. This means that any existing users of crate2nix
          # don't get a spurious rebuild unless they set these explicitly.
          testCommand = pkgs.lib.concatStringsSep "\n"
            (pkgs.lib.filter (s: s != "") [
              testPreRun
              "$f $testCrateFlags 2>&1 | tee -a $out"
              testPostRun
            ]);
        in
        pkgs.runCommand "run-tests-${testCrate.name}"
          {
            inherit testCrateFlags;
            buildInputs = testInputs;
          } ''
          set -e

          export RUST_BACKTRACE=1

          # recreate a file hierarchy as when running tests with cargo

          # the source for test data
          # It's necessary to locate the source in $NIX_BUILD_TOP/source/
          # instead of $NIX_BUILD_TOP/
          # because we compiled those test binaries in the former and not the latter.
          # So all paths will expect source tree to be there and not in the build top directly.
          # For example: $NIX_BUILD_TOP := /build in general, if you ask yourself.
          # NOTE: There could be edge cases if `crate.sourceRoot` does exist but
          # it's very hard to reason about them.
          # Open a bug if you run into this!
          mkdir -p source/
          cd source/

          ${pkgs.buildPackages.xorg.lndir}/bin/lndir ${crate.src}

          # build outputs
          testRoot=target/debug
          mkdir -p $testRoot

          # executables of the crate
          # we copy to prevent std::env::current_exe() to resolve to a store location
          for i in ${crate}/bin/*; do
            cp "$i" "$testRoot"
          done
          chmod +w -R .

          # test harness executables are suffixed with a hash, like cargo does
          # this allows to prevent name collision with the main
          # executables of the crate
          hash=$(basename $out)
          for file in ${drv}/tests/*; do
            f=$testRoot/$(basename $file)-$hash
            cp $file $f
            ${testCommand}
          done
        '';
    in
    pkgs.runCommand "${crate.name}-linked"
      {
        inherit (crate) outputs crateName;
        passthru = (crate.passthru or { }) // {
          inherit test;
        };
      }
      (lib.optionalString (stdenv.buildPlatform.canExecute stdenv.hostPlatform) ''
        echo tested by ${test}
      '' + ''
        ${lib.concatMapStringsSep "\n" (output: "ln -s ${crate.${output}} ${"$"}${output}") crate.outputs}
      '');

  /* A restricted overridable version of builtRustCratesWithFeatures. */
  buildRustCrateWithFeatures =
    { packageId
    , features ? rootFeatures
    , crateOverrides ? defaultCrateOverrides
    , buildRustCrateForPkgsFunc ? null
    , runTests ? false
    , testCrateFlags ? [ ]
    , testInputs ? [ ]
      # Any command to run immediatelly before a test is executed.
    , testPreRun ? ""
      # Any command run immediatelly after a test is executed.
    , testPostRun ? ""
    }:
    lib.makeOverridable
      (
        { features
        , crateOverrides
        , runTests
        , testCrateFlags
        , testInputs
        , testPreRun
        , testPostRun
        }:
        let
          buildRustCrateForPkgsFuncOverriden =
            if buildRustCrateForPkgsFunc != null
            then buildRustCrateForPkgsFunc
            else
              (
                if crateOverrides == pkgs.defaultCrateOverrides
                then buildRustCrateForPkgs
                else
                  pkgs: (buildRustCrateForPkgs pkgs).override {
                    defaultCrateOverrides = crateOverrides;
                  }
              );
          builtRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = false;
          };
          builtTestRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = true;
          };
          drv = builtRustCrates.crates.${packageId};
          testDrv = builtTestRustCrates.crates.${packageId};
          derivation =
            if runTests then
              crateWithTest
                {
                  crate = drv;
                  testCrate = testDrv;
                  inherit testCrateFlags testInputs testPreRun testPostRun;
                }
            else drv;
        in
        derivation
      )
      { inherit features crateOverrides runTests testCrateFlags testInputs testPreRun testPostRun; };

  /* Returns an attr set with packageId mapped to the result of buildRustCrateForPkgsFunc
    for the corresponding crate.
  */
  builtRustCratesWithFeatures =
    { packageId
    , features
    , crateConfigs ? crates
    , buildRustCrateForPkgsFunc
    , runTests
    , makeTarget ? makeDefaultTarget
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs (makeTarget stdenv.hostPlatform));
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures
          (
            args // {
              inherit rootPackageId;
              target = makeTarget stdenv.hostPlatform // { test = runTests; };
            }
          );
        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageIdByPkgs = mkBuiltByPackageIdByPkgs pkgs;
        mkBuiltByPackageIdByPkgs = pkgs:
          let
            self = {
              crates = lib.mapAttrs (packageId: value: buildByPackageIdForPkgsImpl self pkgs packageId) crateConfigs;
              target = makeTarget stdenv.hostPlatform;
              build = mkBuiltByPackageIdByPkgs pkgs.buildPackages;
            };
          in
          self;
        buildByPackageIdForPkgsImpl = self: pkgs: packageId:
          let
            features = mergedFeatures."${packageId}" or [ ];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig =
              builtins.removeAttrs crateConfig' [ "resolvedDefaultFeatures" "devDependencies" ];
            devDependencies =
              lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig'.devDependencies or [ ]);
            dependencies =
              dependencyDerivations {
                inherit features;
                inherit (self) target;
                buildByPackageId = depPackageId:
                  # proc_macro crates must be compiled for the build architecture
                  if crateConfigs.${depPackageId}.procMacro or false
                  then self.build.crates.${depPackageId}
                  else self.crates.${depPackageId};
                dependencies =
                  (crateConfig.dependencies or [ ])
                  ++ devDependencies;
              };
            buildDependencies =
              dependencyDerivations {
                inherit features;
                inherit (self.build) target;
                buildByPackageId = depPackageId:
                  self.build.crates.${depPackageId};
                dependencies = crateConfig.buildDependencies or [ ];
              };
            dependenciesWithRenames =
              let
                buildDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self) target;
                  dependencies = crateConfig.dependencies or [ ] ++ devDependencies;
                };
                hostDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self.build) target;
                  dependencies = crateConfig.buildDependencies or [ ];
                };
              in
              lib.filter (d: d ? "rename") (hostDeps ++ buildDeps);
            # Crate renames have the form:
            #
            # {
            #    crate_name = [
            #       { version = "1.2.3"; rename = "crate_name01"; }
            #    ];
            #    # ...
            # }
            crateRenames =
              let
                grouped =
                  lib.groupBy
                    (dependency: dependency.name)
                    dependenciesWithRenames;
                versionAndRename = dep:
                  let
                    package = crateConfigs."${dep.packageId}";
                  in
                  { inherit (dep) rename; inherit (package) version; };
              in
              lib.mapAttrs (name: builtins.map versionAndRename) grouped;
          in
          buildRustCrateForPkgsFunc pkgs
            (
              crateConfig // {
                src = crateConfig.src or (
                  pkgs.fetchurl rec {
                    name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                    # https://www.pietroalbini.org/blog/downloading-crates-io/
                    # Not rate-limited, CDN URL.
                    url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                    sha256 =
                      assert (lib.assertMsg (crateConfig ? sha256) "Missing sha256 for ${name}");
                      crateConfig.sha256;
                  }
                );
                extraRustcOpts = lib.lists.optional (targetFeatures != [ ]) "-C target-feature=${lib.concatMapStringsSep "," (x: "+${x}") targetFeatures}";
                inherit features dependencies buildDependencies crateRenames release;
              }
            );
      in
      builtByPackageIdByPkgs;

  /* Returns the actual derivations for the given dependencies. */
  dependencyDerivations =
    { buildByPackageId
    , features
    , dependencies
    , target
    }:
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: buildByPackageId dependency.packageId;
      in
      map depDerivation enabledDependencies;

  /* Returns a sanitized version of val with all values substituted that cannot
    be serialized as JSON.
  */
  sanitizeForJson = val:
    if builtins.isAttrs val
    then lib.mapAttrs (n: sanitizeForJson) val
    else if builtins.isList val
    then builtins.map sanitizeForJson val
    else if builtins.isFunction val
    then "function"
    else val;

  /* Returns various tools to debug a crate. */
  debugCrate = { packageId, target ? makeDefaultTarget stdenv.hostPlatform }:
    assert (builtins.isString packageId);
    let
      debug = rec {
        # The built tree as passed to buildRustCrate.
        buildTree = buildRustCrateWithFeatures {
          buildRustCrateForPkgsFunc = _: lib.id;
          inherit packageId;
        };
        sanitizedBuildTree = sanitizeForJson buildTree;
        dependencyTree = sanitizeForJson
          (
            buildRustCrateWithFeatures {
              buildRustCrateForPkgsFunc = _: crate: {
                "01_crateName" = crate.crateName or false;
                "02_features" = crate.features or [ ];
                "03_dependencies" = crate.dependencies or [ ];
              };
              inherit packageId;
            }
          );
        mergedPackageFeatures = mergePackageFeatures {
          features = rootFeatures;
          inherit packageId target;
        };
        diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
          inherit packageId target;
        };
      };
    in
    { internal = debug; };

  /* Returns differences between cargo default features and crate2nix default
    features.

    This is useful for verifying the feature resolution in crate2nix.
  */
  diffDefaultPackageFeatures =
    { crateConfigs ? crates
    , packageId
    , target
    }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures =
          prefixValues
            "crate2nix"
            (mergePackageFeatures { inherit crateConfigs packageId target; features = [ "default" ]; });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) { } [ mergedFeatures configs ];
        onlyInCargo =
          builtins.attrNames
            (lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined);
        onlyInCrate2Nix =
          builtins.attrNames
            (lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined);
        differentFeatures = lib.filterAttrs
          (
            n: v:
              (v ? "crate2nix")
              && (v ? "cargo")
              && (v.crate2nix.features or [ ]) != (v."cargo".resolved_default_features or [ ])
          )
          combined;
      in
      builtins.toJSON {
        inherit onlyInCargo onlyInCrate2Nix differentFeatures;
      };

  /* Returns an attrset mapping packageId to the list of enabled features.

    If multiple paths to a dependency enable different features, the
    corresponding feature sets are merged. Features in rust are additive.
  */
  mergePackageFeatures =
    { crateConfigs ? crates
    , packageId
    , rootPackageId ? packageId
    , features ? rootFeatures
    , dependencyPath ? [ crates.${packageId}.crateName ]
    , featuresByPackageId ? { }
    , target
      # Adds devDependencies to the crate with rootPackageId.
    , runTests ? false
    , ...
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or { }) features;
        enabledFeatures = enableFeatures (crateConfig.dependencies or [ ]) expandedFeatures;
        depWithResolvedFeatures = dependency:
          let
            inherit (dependency) packageId;
            features = dependencyFeatures enabledFeatures dependency;
          in
          { inherit packageId features; };
        resolveDependencies = cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies);
          let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = enabledFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
          foldOverCache
            (
              cache: { packageId, features }:
                let
                  cacheFeatures = cache.${packageId} or [ ];
                  combinedFeatures = sortedUnique (cacheFeatures ++ features);
                in
                if cache ? ${packageId} && cache.${packageId} == combinedFeatures
                then cache
                else
                  mergePackageFeatures {
                    features = combinedFeatures;
                    featuresByPackageId = cache;
                    inherit crateConfigs packageId target runTests rootPackageId;
                  }
            );
        cacheWithSelf =
          let
            cacheFeatures = featuresByPackageId.${packageId} or [ ];
            combinedFeatures = sortedUnique (cacheFeatures ++ enabledFeatures);
          in
          featuresByPackageId // {
            "${packageId}" = combinedFeatures;
          };
        cacheWithDependencies =
          resolveDependencies cacheWithSelf "dep"
            (
              crateConfig.dependencies or [ ]
              ++ lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig.devDependencies or [ ])
            );
        cacheWithAll =
          resolveDependencies
            cacheWithDependencies "build"
            (crateConfig.buildDependencies or [ ]);
      in
      cacheWithAll;

  /* Returns the enabled dependencies given the enabled features. */
  filterEnabledDependencies = { dependencies, features, target }:
    assert (builtins.isList dependencies);
    assert (builtins.isList features);
    assert (builtins.isAttrs target);

    lib.filter
      (
        dep:
        let
          targetFunc = dep.target or (features: true);
        in
        targetFunc { inherit features target; }
        && (
          !(dep.optional or false)
          || builtins.any (doesFeatureEnableDependency dep) features
        )
      )
      dependencies;

  /* Returns whether the given feature should enable the given dependency. */
  doesFeatureEnableDependency = dependency: feature:
    let
      name = dependency.rename or dependency.name;
      prefix = "${name}/";
      len = builtins.stringLength prefix;
      startsWithPrefix = builtins.substring 0 len feature == prefix;
    in
    feature == name || feature == "dep:" + name || startsWithPrefix;

  /* Returns the expanded features for the given inputFeatures by applying the
    rules in featureMap.

    featureMap is an attribute set which maps feature names to lists of further
    feature names to enable in case this feature is selected.
  */
  expandFeatures = featureMap: inputFeatures:
    assert (builtins.isAttrs featureMap);
    assert (builtins.isList inputFeatures);
    let
      expandFeaturesNoCycle = oldSeen: inputFeatures:
        if inputFeatures != [ ]
        then
          let
            # The feature we're currently expanding.
            feature = builtins.head inputFeatures;
            # All the features we've seen/expanded so far, including the one
            # we're currently processing.
            seen = oldSeen // { ${feature} = 1; };
            # Expand the feature but be careful to not re-introduce a feature
            # that we've already seen: this can easily cause a cycle, see issue
            # #209.
            enables = builtins.filter (f: !(seen ? "${f}")) (featureMap."${feature}" or [ ]);
          in
          [ feature ] ++ (expandFeaturesNoCycle seen (builtins.tail inputFeatures ++ enables))
        # No more features left, nothing to expand to.
        else [ ];
      outFeatures = expandFeaturesNoCycle { } inputFeatures;
    in
    sortedUnique outFeatures;

  /* This function adds optional dependencies as features if they are enabled
    indirectly by dependency features. This function mimics Cargo's behavior
    described in a note at:
    https://doc.rust-lang.org/nightly/cargo/reference/features.html#dependency-features
  */
  enableFeatures = dependencies: features:
    assert (builtins.isList features);
    assert (builtins.isList dependencies);
    let
      additionalFeatures = lib.concatMap
        (
          dependency:
            assert (builtins.isAttrs dependency);
            let
              enabled = builtins.any (doesFeatureEnableDependency dependency) features;
            in
            if (dependency.optional or false) && enabled
            then [ (dependency.rename or dependency.name) ]
            else [ ]
        )
        dependencies;
    in
    sortedUnique (features ++ additionalFeatures);

  /*
    Returns the actual features for the given dependency.

    features: The features of the crate that refers this dependency.
  */
  dependencyFeatures = features: dependency:
    assert (builtins.isList features);
    assert (builtins.isAttrs dependency);
    let
      defaultOrNil =
        if dependency.usesDefaultFeatures or true
        then [ "default" ]
        else [ ];
      explicitFeatures = dependency.features or [ ];
      additionalDependencyFeatures =
        let
          name = dependency.rename or dependency.name;
          stripPrefixMatch = prefix: s:
            if lib.hasPrefix prefix s
            then lib.removePrefix prefix s
            else null;
          extractFeature = feature: lib.findFirst
            (f: f != null)
            null
            (map (prefix: stripPrefixMatch prefix feature) [
              (name + "/")
              (name + "?/")
            ]);
          dependencyFeatures = lib.filter (f: f != null) (map extractFeature features);
        in
        dependencyFeatures;
    in
    defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

  /* Sorts and removes duplicates from a list of strings. */
  sortedUnique = features:
    assert (builtins.isList features);
    assert (builtins.all builtins.isString features);
    let
      outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) { } features;
      outFeaturesUnique = builtins.attrNames outFeaturesSet;
    in
    builtins.sort (a: b: a < b) outFeaturesUnique;

  deprecationWarning = message: value:
    if strictDeprecation
    then builtins.throw "strictDeprecation enabled, aborting: ${message}"
    else builtins.trace message value;

  #
  # crate2nix/default.nix (excerpt end)
  #
  };
}

